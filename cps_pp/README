Welcome to the Columbia Physics System 

	0. Preliminaries

The CPS consists of code to build a library which is can be statically
linked to your code to create an executable. In addition there are
tests and documentation. More about this in the 'Compiling' section.

The primary intended target architecture is QCDOC, but builds for
scalar machines or parallel machines with MPI are also supported, as
well as QCDSP in some sort of legacy sense. This will be covered in
the 'Configuring' section. 

The directory containg this file is the source directory and will be 
denoted <sourcedir> in what follows.

The code can be built in such a way that the object files and
libraries are placed in an entirely different build directory. This
could be useful if you want to use the same source for multiple builds
and is an alternative to the common 'install' procedure.

The source and build directories can be identical. 

************ CHANGES in v4_8_11
(De)serialization of input structures to files are available vil VML.
Currently, CgArg, DoArg, WspectArg are processed via VML. Refer to 
tests/f_hmd/main.C for usage example.
************ CHANGES in v4_8_11 (end)

	1. Configuring.

The configure script should be run from the build directory, e.g.

$ <sourcedir>/configure [flags]

where <sourcedir> is the absolute path of the source directory or the
relative path from the build directory.

The flags determine the type of system that can be built; type

$ <sourcedir>/configure --help 

for a summary. Here are some useful general flags

--enable-target[=<target architecture>]
Specifies that target architecture for which the compilation is to be
made. Valid values are 'qcdoc', 'qcdsp', 'mpi' and 'noarch' (scalar
architecture). The latter is the default.

--enable-optimise  
Compile with maximum optimisation. This is on by default.

--enable-debug     
Compile with flags to enable running a debugger on the code. This
turns off all compiler optimisation flags. This is off by default.

--enable-namespace   
Compiles the library inside a 'cps' namespace. The default for a QCDOC
build is not to use the namespace. A QCDSP build ignores this flag and
never uses the namespace. For other architectures the namespace is
used by default.

--enable-double-prec    
Build the code to use double-precision floating opint arithmetic. This
is on by default.

These --enable-FEATURE flags can be negated by using --disable-FEATURE
or --enable-feature=no (except for --enable-target, where negation
doesn't make sense). 

    1.1 Build for a scalar machine

No further flags should be needed if you are building for a workstation.

    1.2 Build for QCDOC

This is slightly complicated because in this case a cross-compilation
is needed. The flags are
--enable-target=qcdoc --build=sparc-sun-solaris2.9 --host=powerpc-gnu-elf QOS=$QOS

where $QOS should be be the path to the main QOS directory. If you
don't want to remember that, use use the script 'conf':

$ <sourcedir>/conf --enable-target=qcdoc

which puts the command above into a file called 'config_wrapper'.

    1.3 Build for a parallel MPI machine

Use the flag

--enable-target=mpi 

The configure script then looks for a compiler called mpic++, mpiCC or
mpCC, which are common names for compiler wrapper scripts on MPI
systems which supply all the other necessary compiler and linker
flags. If these don't exist, g++ will be used as the compiler, and
configure will look for a library called mpi or mpich in the standard
locations. If your MPI headers and library are in a non-standard
location then you will need to specify this on the command line with

$ <sourcedir>/configure --enable-taget=mpi CXXFLAGS=/path/to/mpiheaders LIBS=-lmpi LDFLAGS=/path/to/mpilibraries

See the autoconf(1) documentatoin for more details.

    1.4 Build for QCDSP

Has anyone tried this recently?

	2. Compiling

Note that GNU make is needed. Having configured the system, the
library is built by simply running GNU make: 

************ CHANGES in v4_8_11
$ gmake headers
$ gmake

'gmake headers' is needed to generate headers for input structures via VML.
If you have multiple targets with different precision for (I)Floats, you need to
run 'gmake headers' each time you switch targets. Otherwise, 'gmake headers' is needed only once.
************ CHANGES in v4_8_11 (end)

This produces  directory tree called objs containing all the object
files and the library cps.a in your build directory (But see also
section 4).


	3. Other make targets

    3.1. docs

You need to have doxygen, perl and bash installed on your system for
this to work. 

Making this target produces the HTML code reference manual and user
guide in doc/ref/html and doc/usr/html respectively

    3.2.  test

This target runs the suite of regression tests. The file
tests/Makefile_common provides a useful template of makefile to use to
build executables with the CPS.
This uses xmldiff, so you need that to be installed in your PATH, and the 
appropriate Java libraries.
You need also perl installed on your system in order for this to work.

    3.3.  clean

This removes all the object files.

    3.4.  cleanlib 

This removes the libraries.

    3.5.  realclean

This removes everything created by the makefile.

    3.6.  webdocs

This creates the Reference Manual and User Guide  referred to above and
a whole raft of other documentation in a form suitable for publishing
on the web. N.B. THIS COMMAND WILL DELETE ALL THE SOURCE CODE.


	4. Separate libraries

By default, CPS produces a single library called cps.a containing all
the object code. However, you can divide the object code into separate
libraries. This involves editing the Makefiles in the src/ tree.

Each directory in the src/ tree has a Makefile. By defining a variable
called SEPERATE_LIB (sic) and giving it the value "yes", the code in
the subdirectories will be compiled into separate libraries. 
The name of each library will be the path of the
directory, with '_' replacing '/'. Some common directory names are
ommited for brevity.  

For example, suppose we have a directory structure like this:

src/util/dirac_op/d_op_wilson/  
				/dir1 
					/dir1_1
				       	/dir1_2	
				/dir2

where dir1_1 and dir1_2 contain source code.

If SEPARATE_LIB="yes" in src/util/dirac_op/d_op_wilson/Makefile, 
the source code in dir1_1 is compiled into the library
d_op_wilson_dir1_dir1_1.a 
and the source code in dir1_2 is compiled into the library
d_op_wilson_dir1_dir1_2.a, 
while the code in dir2 will be compiled into d_op_wilson_dir2.a

		
	5 See Also

The browsable documentation, starting at doc/index.html

The CPS++ mailing list archives at 
http://forge.nesc.ac.uk/pipermail/qcd-measure-cps++/

