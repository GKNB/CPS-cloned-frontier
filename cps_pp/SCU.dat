
-----------------------------------------------------------------
./src/alg/alg_s_spect/hadron_prop_s.C
-----------------------------------------------------------------
const SCUDir pos_dir[] = { SCU_XP, SCU_YP, SCU_ZP, SCU_TP };
const SCUDir neg_dir[] = { SCU_XM, SCU_YM, SCU_ZM, SCU_TM };
  SCUDirArg send(transmit_buf_p, neg_dir[direction], SCU_SEND, blcklength);

-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/glb_min_max.C
-----------------------------------------------------------------
const SCUDir dir[] = { SCU_XP, SCU_XM, SCU_YP, SCU_YM,
                       SCU_ZP, SCU_ZM, SCU_TP, SCU_TM };
	SCUDirArg send(transmit_buf, dir[2*i], SCU_SEND, sizeof(Float));
	SCUDirArg rcv(receive_buf, dir[2*i+1], SCU_REC, sizeof(Float));
	SCUDirArg send(transmit_buf, dir[2*i], SCU_SEND, sizeof(Float));
	SCUDirArg rcv(receive_buf, dir[2*i+1], SCU_REC, sizeof(Float));
-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/glb_sum_dir.C
-----------------------------------------------------------------
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, sizeof(Double64));
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, sizeof(Double64));
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, sizeof(Double64));
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, sizeof(Double64));
-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/glb_sum.C
-----------------------------------------------------------------
	SCUDirArg send(transmit_buf, gjp_scu_dir[2*i], SCU_SEND, sizeof(Double64) );
	SCUDirArg rcv(receive_buf, gjp_scu_dir[2*i+1], SCU_REC, sizeof(Double64) );
-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/glb_sum_matrix_dir.C
-----------------------------------------------------------------
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/glb_sum_multi_dir.C
-----------------------------------------------------------------
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
-----------------------------------------------------------------
./src/comms/qmp/glb_cpp/slice_sum.C
-----------------------------------------------------------------
const SCUDir pos_dir[] = { SCU_XP, SCU_YP, SCU_ZP, SCU_TP };
const SCUDir neg_dir[] = { SCU_XM, SCU_YM, SCU_ZM, SCU_TM };
      SCUDirArg send(transmit_buf_p, pos_dir[i], SCU_SEND, blcklength*sizeof(IFloat));
      SCUDirArg rcv(receive_buf_p, neg_dir[i], SCU_REC, blcklength*sizeof(IFloat));
         // do SCU transfers
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_min_max.C
-----------------------------------------------------------------
const SCUDir dir[] = { SCU_XP, SCU_XM, SCU_YP, SCU_YM,
                       SCU_ZP, SCU_ZM, SCU_TP, SCU_TM };
static SCUAxis gsum_axis[]={SCU_X,SCU_Y,SCU_Z,SCU_T};
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_sum_dir.C
-----------------------------------------------------------------
static SCUAxis gsum_axis[]={SCU_X,SCU_Y,SCU_Z,SCU_T,SCU_S,SCU_W};
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_sum.C
-----------------------------------------------------------------
static SCUAxis gsum_axis[]={SCU_X,SCU_Y,SCU_Z,SCU_T};
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_sum_matrix_dir.C
-----------------------------------------------------------------
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
    SCUDirArg send(transmit_buf, gjp_scu_dir[2*dir], SCU_SEND, blocksize);
    SCUDirArg rcv(receive_buf, gjp_scu_dir[2*dir+1], SCU_REC, blocksize);
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_sum_five.C
-----------------------------------------------------------------
static SCUAxis gsum_axis[]={SCU_X,SCU_Y,SCU_Z,SCU_T,SCU_S};
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/glb_sum_multi_dir.C
-----------------------------------------------------------------
static SCUAxis gsum_axis[]={SCU_X,SCU_Y,SCU_Z,SCU_T,SCU_S,SCU_W};
-----------------------------------------------------------------
./src/comms/qmp/glb_passthru/slice_sum.C
-----------------------------------------------------------------
const SCUDir pos_dir[] = { SCU_XP, SCU_YP, SCU_ZP, SCU_TP };
const SCUDir neg_dir[] = { SCU_XM, SCU_YM, SCU_ZM, SCU_TM };
      SCUDirArg send(transmit_buf_p, pos_dir[i], SCU_SEND, blcklength*sizeof(IFloat));
      SCUDirArg rcv(receive_buf_p, neg_dir[i], SCU_REC, blcklength*sizeof(IFloat));
         // do SCU transfers
-----------------------------------------------------------------
./src/comms/qmp/scu/glb_sum_internal.C
-----------------------------------------------------------------
static SCUDirArgIR *Send[5];
static SCUDirArgIR *Recv[5];
static SCUDirArgMulti *multi[5];
      Send[i]= new SCUDirArgIR(transmit_buf,gjp_scu_dir[2*i+1],SCU_SEND,length[i]*sizeof(Double64));
       Recv[i]= new SCUDirArgIR(receive_buf,gjp_scu_dir[2*i],SCU_REC,length[i]*sizeof(Double64));
         Send[dir]= new SCUDirArgIR(transmit_buf,gjp_scu_dir[2*dir+1],SCU_SEND,length[dir]*sizeof(Double64));
         Recv[dir]= new SCUDirArgIR(receive_buf,gjp_scu_dir[2*dir],SCU_REC,length[dir]*sizeof(Double64));
-----------------------------------------------------------------
./src/comms/qmp/scu/get_data.C
-----------------------------------------------------------------
    SCUDirArgIR send(send_noncache, gjp_scu_dir[2*mu+1], SCU_SEND, len*sizeof(IFloat));
    SCUDirArgIR rcv(rcv_noncache, gjp_scu_dir[2*mu], SCU_REC, len*sizeof(IFloat));
    SCUDirArgIR send(send_noncache, gjp_scu_dir[2*mu], SCU_SEND, len*sizeof(IFloat));
    SCUDirArgIR rcv(rcv_noncache, gjp_scu_dir[2*mu+1], SCU_REC, len*sizeof(IFloat));
const SCUDir pos_dir[] = { SCU_XP, SCU_YP, SCU_ZP, SCU_TP };
const SCUDir neg_dir[] = { SCU_XM, SCU_YM, SCU_ZM, SCU_TM };
//  the spatial cube: 2 times SCU transfer
    SCUDirArg send1(send_buf, pos_dir[mu], SCU_SEND, len*sizeof(IFloat));
    SCUDirArg recv1(tmp_buf, neg_dir[mu], SCU_REC, len*sizeof(IFloat));
    SCUDirArg send2(tmp_buf, pos_dir[nu], SCU_SEND, len*sizeof(IFloat));
    SCUDirArg recv2(rcv_buf, neg_dir[nu], SCU_REC, len*sizeof(IFloat));
    SCUDirArg send1(send_noncache, pos_dir[i], SCU_SEND, len*sizeof(IFloat) );
    SCUDirArg recv1(rcv_noncache, neg_dir[i], SCU_REC, len*sizeof(IFloat) );
    SCUDirArg send2(rcv_noncache, pos_dir[j], SCU_SEND, len*sizeof(IFloat) );
    SCUDirArg recv2(tmp_buf, neg_dir[j], SCU_REC, len*sizeof(IFloat));
    SCUDirArg send3(tmp_buf, pos_dir[k], SCU_SEND, len*sizeof(IFloat));
    SCUDirArg recv3(rcv_noncache, neg_dir[k], SCU_REC, len*sizeof(IFloat));
static SCUDirArg scu_send;
static SCUDirArg scu_recv;
    		scu_send.Init(send_noncache, gjp_scu_dir[s_dir], SCU_SEND, 
    	scu_send.Init(send_buf, gjp_scu_dir[s_dir], SCU_SEND,
    		scu_recv.Init(rcv_noncache, gjp_scu_dir[r_dir], SCU_SEND, 
    		scu_recv.Init(rcv_buf, gjp_scu_dir[r_dir], SCU_SEND, 
-----------------------------------------------------------------
./src/comms/qmp/scu/glb_sum2.C
-----------------------------------------------------------------
  static SCUDirArgIR *Send[5];
  static SCUDirArgIR *Recv[5];
      Send[i] = new SCUDirArgIR(transmit_buf, gjp_scu_dir[2*i+1], SCU_SEND, sizeof(Double64));
      Recv[i] = new SCUDirArgIR(receive_buf, gjp_scu_dir[2*i], SCU_REC, sizeof(Double64));
  static SCUDirArgIR *Send[5];
  static SCUDirArgIR *Recv[5];
		Send[i] = new SCUDirArgIR(transmit_buf_u, gjp_scu_dir[2*i+1], SCU_SEND, sizeof(unsigned long long));
		Recv[i] = new SCUDirArgIR(receive_buf_u, gjp_scu_dir[2*i], SCU_REC, sizeof(unsigned long long));
-----------------------------------------------------------------
./src/util/data_shift/qcdoc/shift_util.C
-----------------------------------------------------------------
  SCUDir s_dir,r_dir;
  SCUDirArgIR Send(send_p,s_dir,SCU_SEND,data_len);
  SCUDirArgIR Recv(recv_p,r_dir,SCU_REC,data_len);
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/noarch/asqtad_dirac.C
-----------------------------------------------------------------
//  Rarg (for SCU receives) never changes, since it receives into
//  SCUarg[3] is set up for different Xoffset and Toffset.
SCUDirArgIR * SCUarg[2*NUM_DIR];
SCUDirArgIR SCUargIR[2*NUM_DIR];
SCUDirArgMulti * SCUmulti;
SCUDirArgMulti SCUmultiIR;
SCUDirArgIR * SCUarg_1[2*NUM_DIR];
SCUDirArgIR SCUarg_1IR[2*NUM_DIR];
SCUDirArgMulti * SCUmulti_1;
SCUDirArgMulti SCUmulti_1IR;
SCUDMAInst *SCUDMAarg_p[NUM_DIR*4];
SCUDMAInst SCUDMAarg[NUM_DIR*4];
SCUDirArgIR * SCUarg_2[2*NUM_DIR];
SCUDirArgIR SCUarg_2IR[2*NUM_DIR];
SCUDirArgMulti * SCUmulti_2;
SCUDirArgMulti SCUmulti_2IR;
  //  Set up SCU buffer parameters.  T direction is special, since
      SCUarg[i + NUM_DIR] = &(SCUargIR[i+NUM_DIR]);
      SCUarg[i + NUM_DIR] ->Init(chi_off_node[2][i], scudir[i], SCU_REC,
      SCUarg[i + NUM_DIR] ->Assert();
    SCUDMAarg_p[(i+NUM_DIR)*2]  = &(SCUDMAarg[(i+NUM_DIR)*2]);
    SCUDMAarg_p[(i+NUM_DIR)*2] ->Init(chi_off_node[0][i],
    SCUDMAarg_p[(i+NUM_DIR)*2+1]  = &(SCUDMAarg[(i+NUM_DIR)*2+1]);
    SCUDMAarg_p[(i+NUM_DIR)*2+1] ->Init(chi_off_node[1][i],
      SCUarg_1[i + NUM_DIR] = &(SCUarg_1IR[i+NUM_DIR]);
      SCUarg_1[i + NUM_DIR] ->Init(scudir[i],SCU_REC, &SCUDMAarg_p[(i+NUM_DIR)*2],1, IR_5);
      SCUarg_1[i + NUM_DIR] ->Assert();
      SCUarg_2[i + NUM_DIR] = &(SCUarg_2IR[i+NUM_DIR]);
      SCUarg_2[i + NUM_DIR] ->Init(scudir[i],SCU_REC, &SCUDMAarg_p[(i+NUM_DIR)*2+1],1, IR_6);
      SCUarg_2[i + NUM_DIR] ->Assert();
      SCUarg_1[i + NUM_DIR] = &(SCUarg_1IR[i+NUM_DIR]);
      SCUarg_1[i + NUM_DIR] ->Init(scudir[i],SCU_REC, &SCUDMAarg_p[(i+NUM_DIR)*2],2, IR_5);
      SCUarg_1[i + NUM_DIR] ->Assert();
      SCUarg[i] = &(SCUargIR[i]);
        SCUarg[i] ->Init (Tbuffer[2][(4 - i)/4], scudir[i], SCU_SEND,
        SCUarg[i] ->Init (Tbuffer[1][i/4], scudir[i], SCU_SEND,
        SCUarg[i] ->Init (chi_off_node[0][4-i], scudir[i], SCU_SEND,
      SCUarg[i] ->Assert();
      SCUDMAarg_p[i*2] = &(SCUDMAarg[i*2]);
      SCUDMAarg_p[i*2] ->Init(Tbuffer[0][(4 - i)/4], 
      SCUDMAarg_p[i*2+1] = &(SCUDMAarg[i*2+1]);
        SCUDMAarg_p[i*2+1] ->Init(Tbuffer[1][(4 - i)/4], 
        SCUDMAarg_p[i*2+1] ->Init(Tbuffer[0][i/4], 
      SCUarg_1[i] = &(SCUarg_1IR[i]);
      SCUarg_1[i] ->Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2],1,IR_5);
      SCUarg_1[i] ->Assert();
      SCUarg_2[i] = &(SCUarg_2IR[i]);
      SCUarg_2[i] ->Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2+1],1,IR_6);
      SCUarg_2[i] ->Assert();
      SCUarg_1[i] = &(SCUarg_1IR[i]);
      SCUarg_1[i] ->Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2],2,IR_5);
      SCUarg_1[i] ->Assert();
      SCUarg[i] = &(SCUargIR[i]);
        SCUarg[i] ->Init(( void * ) 0, scudir[i], SCU_SEND,
        SCUarg[i] ->Init(chi_off_node[0][(i+4)%NUM_DIR], scudir[i], SCU_SEND,
      SCUarg[i] ->Assert();
      SCUDMAarg_p[i*2] = &(SCUDMAarg[i*2]);
      SCUDMAarg_p[i*2] ->Init((void *)0, 
      SCUDMAarg_p[i*2+1] = &(SCUDMAarg[i*2+1]);
      SCUDMAarg_p[i*2+1] ->Init((void *)0, 
        SCUarg_1[i] = &(SCUarg_1IR[i]);
        SCUarg_1[i] -> Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2],1,IR_5);
        SCUarg_1[i] ->Assert();
        SCUarg_2[i] = &(SCUarg_2IR[i]);
        SCUarg_2[i] -> Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2+1],1,IR_6);
        SCUarg_2[i] ->Assert();
        SCUarg_1[i] = &(SCUarg_1IR[i]);
        SCUarg_1[i] -> Init(scudir[i],SCU_SEND,&SCUDMAarg_p[i*2],2,IR_5);
        SCUarg_1[i] ->Assert();
  SCUmulti = &SCUmultiIR;
  SCUmulti->Init(SCUarg, 2*NUM_DIR);
  SCUmulti_1 = &SCUmulti_1IR;
  SCUmulti_1->Init(SCUarg_1, 2*NUM_DIR);
    SCUmulti_2 = &SCUmulti_2IR;
    SCUmulti_2->Init(SCUarg_2, 2*NUM_DIR);
    delete SCUarg[i];
    delete SCUarg[i+8];
    delete SCUarg_1[i];
    delete SCUarg_1[i+8];
      delete SCUDMAarg_p[i*4+k];
  //  SCU transfer structure to get links from off node and a
    SCUarg[i]->Addr( a + Xoffset[2][i]);
    SCUarg[i+4]->Addr( a + Xoffset[2][i+4]);
      SCUarg_1[i]->Addr( addr,1);
      SCUarg_2[i]->Addr( addr+1,1);
      SCUarg_1[i+4]->Addr( addr,1);
      SCUarg_2[i+4]->Addr( addr+1,1);
      SCUarg_1[i]->Addr( addr,2);
      SCUarg_1[i+4]->Addr( addr,2);
  SCUmulti_1->StartTrans();
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/qcdoc/asqtad_dirac_serial_cpp.C
-----------------------------------------------------------------
extern void SCUTransCRC(SCUDirArg *X, SCUDirArg *R);
void dirac_SCU( SCUDirArg ** Xarg, SCUDirArg ** Rarg, IFloat * a,
      SCUTransCRC(*(Xarg+i), *(Rarg+i+4));
      SCUTransCRC(*(Xarg+i+4), *(Rarg+i));
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/qcdoc/asqd_sum_cpp.C
-----------------------------------------------------------------
extern void SCUTransCRC(SCUDirArg *X, SCUDirArg *R);
void dirac_SCU( SCUDirArg ** Xarg, SCUDirArg ** Rarg, IFloat * a,
      SCUTransCRC(*(Xarg+i), *(Rarg+i+4));
      SCUTransCRC(*(Xarg+i+4), *(Rarg+i));
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/qcdoc/asqtad_dirac.C
-----------------------------------------------------------------
SCUDir AsqD::scudir[] =
  SCU_TP, SCU_XP, SCU_YP, SCU_ZP, SCU_TM, SCU_XM, SCU_YM, SCU_ZM
      if((i-1)==0) offset = area[(k+j+1)%2][0]; //SCU_TP
      if((i-1)==4) offset = area[(k+j)%2][0]; //SCU_TM
  //  Set up SCU buffer parameters.  T direction is special, since
      SCUarg[odd][2*comms].Init(chi_off_node[odd][2][i], scudir[i], SCU_REC,
      SCUDMAarg[odd][(i+NUM_DIR)*2].Init(chi_off_node[odd][0][i],
      SCUDMAarg[odd][(i+NUM_DIR)*2+1].Init(chi_off_node[odd][1][i],
      SCUDMAInst *temp[2];
      temp[0] = &SCUDMAarg[odd][(i+NUM_DIR)*2];
      temp[1] = &SCUDMAarg[odd][(i+NUM_DIR)*2+1];
        SCUarg_1[odd][2*comms].Init(scudir[i],SCU_REC, 
        SCUarg_2[odd][2*comms].Init(scudir[i],SCU_REC, 
        SCUarg_1[odd][2*comms].Init(scudir[i],SCU_REC, 
          SCUarg[odd][2*comms+1].Init (Tbuffer[2][(4 - i)/4], scudir[i], SCU_SEND,
          SCUarg[odd][2*comms+1].Init (Tbuffer[1][i/4], scudir[i], SCU_SEND,
          SCUarg[odd][2*comms+1].Init (chi_off_node[odd][0][4-i], scudir[i], SCU_SEND,
        SCUDMAarg[odd][i*2].Init(Tbuffer[0][(4 - i)/4], 
          SCUDMAarg[odd][i*2+1].Init(Tbuffer[1][(4 - i)/4], 
          SCUDMAarg[odd][i*2+1].Init(Tbuffer[0][i/4], 
        SCUDMAInst *temp[2];
        temp[0]=&(SCUDMAarg[odd][i*2]);
        temp[1]=&(SCUDMAarg[odd][i*2+1]);
          SCUarg_1[odd][2*comms+1].Init(scudir[i],SCU_SEND,temp,1,scu_irs[odd][0]);
          SCUarg_2[odd][2*comms+1].Init(scudir[i],SCU_SEND,temp+1,1,scu_irs[odd][1]);
          SCUarg_1[odd][2*comms+1].Init(scudir[i],SCU_SEND,temp,2,scu_irs[odd][0]);
          SCUarg[odd][2*comms+1].Init(chi_off_node_total, scudir[i], SCU_SEND,
          SCUarg[odd][2*comms+1].Init(chi_off_node[odd][0][(i+4)%NUM_DIR], scudir[i], SCU_SEND,
        SCUDMAarg[odd][i*2].Init(chi_off_node_total, 
        SCUDMAarg[odd][i*2+1].Init(chi_off_node_total, 
        SCUDMAInst *temp[2];
        temp[0]=&SCUDMAarg[odd][i*2];
        temp[1]=&SCUDMAarg[odd][i*2+1];
          SCUarg_1[odd][2*comms+1].Init(scudir[i],SCU_SEND,temp,1,scu_irs[odd][0]);
          SCUarg_2[odd][2*comms+1]. Init(scudir[i],SCU_SEND,temp+1,1,scu_irs[odd][1]);
          SCUarg_1[odd][2*comms+1].Init(scudir[i],SCU_SEND,temp,2,scu_irs[odd][0]);
    SCUDirArgIR *SCUarg_p[2*NUM_DIR];
      for(i = 0;i<2*comms;i++) SCUarg_p[i] = &(SCUarg[odd][i]);
      SCUmulti[odd].Init(SCUarg_p, 2*comms);
      for(i = 0;i<2*comms;i++) SCUarg_p[i] = &(SCUarg_1[odd][i]);
      SCUmulti_1[odd].Init(SCUarg_p, 2*comms);
        for(i = 0;i<2*comms;i++) SCUarg_p[i] = &(SCUarg_2[odd][i]);
        SCUmulti_2[odd].Init(SCUarg_p, 2*comms);
  //  SCU transfer structure to get links from off node and a
  SCUDir snd_dirs[]={SCU_TP,SCU_XP,SCU_YP,SCU_ZP};
  SCUDir rcv_dirs[]={SCU_TM,SCU_XM,SCU_YM,SCU_ZM};
    SCUDirArgIR snd;
    SCUDirArgIR rcv;
      snd.Init(Fat,snd_dirs[n],SCU_SEND,sizeof(matrix));
      rcv.Init(rcv_mat,rcv_dirs[n],SCU_REC,sizeof(matrix));
      SCUDirArgIR snd_naik;
      SCUDirArgIR rcv_naik;
      snd_naik.Init(Naik,snd_dirs[n],SCU_SEND,sizeof(matrix));
      rcv_naik.Init(rcv_mat,rcv_dirs[n],SCU_REC,sizeof(matrix));
     SCUarg[odd][i].Assert();
     SCUarg_1[odd][i].Assert();
        SCUarg[odd][2*comms+1].Addr( a + Xoffset[2][i]);
        SCUarg[odd][2*(comms+non_local_dirs)+1].Addr( a + Xoffset[2][i+4]);
        SCUarg_1[odd][2*comms+1].Addr( addr,1);
        SCUarg_2[odd][2*comms+1].Addr( addr+1,1);
        SCUarg_1[odd][2*(comms+non_local_dirs)+1].Addr( addr,1);
        SCUarg_2[odd][2*(comms+non_local_dirs)+1].Addr( addr+1,1);
        SCUarg_1[odd][2*comms+1].Addr( addr,2);
        SCUarg_1[odd][2*(comms+non_local_dirs)+1].Addr( addr,2);
  SCUmulti_1[odd].StartTrans();
  SCUmulti_1[odd].TransComplete();
  SCUmulti_2[odd].StartTrans();
  SCUmulti_2[odd].TransComplete();
  SCUmulti[odd].StartTrans();
  SCUmulti[odd].StartTrans();
  SCUmulti[odd].TransComplete();
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/qcdoc/asqtad_sum.C
-----------------------------------------------------------------
static SCUDirArgIR *Send[5];
static SCUDirArgIR *Recv[5];
      Send[i] = new SCUDirArgIR(transmit_buf, scudir[i+4], SCU_SEND, sizeof(Double64));
      Recv[i] = new SCUDirArgIR(receive_buf, scudir[i], SCU_REC, sizeof(Double64));
-----------------------------------------------------------------
./src/util/dirac_op/d_op_asqtad/qcdoc/d_op_asqtad.C
-----------------------------------------------------------------
extern SCUDirArgIR *SCUarg;
extern SCUDirArgIR *SCUarg_1;
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdoc/dwf_dslash_5_plus.C
-----------------------------------------------------------------
  SCUDirArgMulti *Plus = dwf_lib_arg->Plus;
  SCUDirArgMulti *Minus = dwf_lib_arg->Minus;
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdoc/dwf_init.C
-----------------------------------------------------------------
  dwf_p->PlusArg[0] = new SCUDirArgIR;
    (dwf_p->PlusArg[0]) ->Init (dwf_p->comm_buf,SCU_SP,SCU_SEND, ls_stride*sizeof(IFloat),1,0,IR_14);
  dwf_p->PlusArg[1] = new SCUDirArgIR;
    (dwf_p->PlusArg[1])->Init(dwf_p->comm_buf,SCU_SM,SCU_REC, ls_stride*sizeof(IFloat),1,0,IR_14);
	dwf_p->Plus = new SCUDirArgMulti;
  dwf_p->MinusArg[0] = new SCUDirArgIR;
    (dwf_p->MinusArg[0]) ->Init (dwf_p->comm_buf ,SCU_SM,SCU_SEND,ls_stride*sizeof(IFloat),1,0,IR_15);
  dwf_p->MinusArg[1] = new SCUDirArgIR;
    (dwf_p->MinusArg[1])->Init(dwf_p->comm_buf,SCU_SP,SCU_REC, ls_stride*sizeof(IFloat),1,0,IR_15);
	dwf_p->Minus = new SCUDirArgMulti;
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdsp_nos/dwf_dslash_5_plus.C
-----------------------------------------------------------------
        (volatile unsigned* )(DSP_SCU_BASE + 0x50);
        (volatile unsigned* )(DSP_SCU_BASE + 0x10);
        (volatile unsigned* )(DSP_SCU_BASE + 0x8);
        (volatile unsigned* )(DSP_SCU_BASE);
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdsp_nos/dwf_init.C
-----------------------------------------------------------------
  dwfso_wire_map[0] = SCURemap( gjp_scu_dir[8] );
  dwfso_wire_map[1] = SCURemap( gjp_scu_dir[9] );
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdsp_nos_hdw_diag/dwf_dslash_5_plus.C
-----------------------------------------------------------------
        (volatile unsigned* )(DSP_SCU_BASE + 0x60);
        (volatile unsigned* )(DSP_SCU_BASE + 0x50);
        (volatile unsigned* )(DSP_SCU_BASE + 0x40);
        (volatile unsigned* )(DSP_SCU_BASE + 0x10);
        (volatile unsigned* )(DSP_SCU_BASE + 0x8);
        (volatile unsigned* )(DSP_SCU_BASE);
-----------------------------------------------------------------
./src/util/dirac_op/d_op_dwf/qcdsp_nos_hdw_diag/dwf_init.C
-----------------------------------------------------------------
  dwfso_wire_map[0] = SCURemap( gjp_scu_dir[8] );
  dwfso_wire_map[1] = SCURemap( gjp_scu_dir[9] );
-----------------------------------------------------------------
./src/util/dirac_op/d_op_p4/noarch/d_op_p4.C
-----------------------------------------------------------------
//extern SCUDirArgIR *SCUarg;
//extern SCUDirArgIR *SCUarg_1;
-----------------------------------------------------------------
./src/util/dirac_op/d_op_p4/qcdoc/d_op_p4.C
-----------------------------------------------------------------
//extern SCUDirArgIR *SCUarg;
//extern SCUDirArgIR *SCUarg_1;
-----------------------------------------------------------------
./src/util/dirac_op/d_op_stag/qcdoc/dirac.C
-----------------------------------------------------------------
static SCUDir scudir[] =
  SCU_TP, SCU_XP, SCU_YP, SCU_ZP, SCU_TM, SCU_XM, SCU_YM, SCU_ZM
//  Rarg (for SCU receives) never changes, since it receives into
static SCUDirArgIR * SCUarg[2*NUM_DIR];
static SCUDirArgMulti * SCUmulti;
  //  Set up SCU buffer parameters.  T direction is special, since
//  printf("dirac_init: Set up SCU parameters\n");
//  printf("dirac_init: Set up SCU parameters\n");
      SCUarg[i + 8] = new SCUDirArgIR;
      SCUarg[i + 8] ->Init(chi_off_node[i], scudir[i], SCU_REC, 
      SCUarg[i] = new SCUDirArgIR(Tbuffer[(4 - i)/4], scudir[i], SCU_SEND, 
      SCUarg[i] = new SCUDirArgIR(Tbuffer[0], scudir[i], SCU_SEND, 
  SCUmulti = new SCUDirArgMulti();
  SCUmulti->Init(SCUarg, 16);
  delete SCUmulti;
    delete SCUarg[i];
    delete SCUarg[i+8];
  //  SCU transfer structure to get links from off node and a
  SCUDirArg X;
  SCUDirArg R;
  SCUDirArgIR X( uc_l[0], scudir[n], SCU_SEND, 18 * sizeof(IFloat));
  SCUDirArgIR R( uc_l[0], scudir[n+4], SCU_REC, 18 * sizeof(IFloat));
  SCUarg[1]->Addr( a + Xoffset[1]);
  SCUarg[5]->Addr( a + Xoffset[5]);
  SCUarg[2]->Addr( a + Xoffset[2]);
  SCUarg[6]->Addr( a + Xoffset[6]);
  SCUarg[3]->Addr( a + Xoffset[3]);
  SCUarg[7]->Addr( a + Xoffset[7]);
//  for(int i = 0;i<2*NUM_DIR;i++) SCUarg[i]->Assert();
  SCUmulti->StartTrans();
//  printf("SCUmulti started\n");
//  for(int i = 0;i<2*NUM_DIR;i++) SCUarg[i]->Assert();
  SCUmulti->TransComplete();
//  printf("SCUmulti ended\n");
-----------------------------------------------------------------
./src/util/dirac_op/d_op_stag/qcdsp/dirac_init.C
-----------------------------------------------------------------
//  Initialization for SCU sytem calls
extern "C" void StagSCUSetup();
} SCU_START_ADDR;
} SCU_BLK_DES;
    SCU_START_ADDR  start_addr[8];
    SCU_BLK_DES   blk_des[8];
//  Added by RDM to set up SCU system calls for staggered cg
  StagSCUSetup();
-----------------------------------------------------------------
./src/util/dirac_op/d_op_stag/qcdsp/dirac.C
-----------------------------------------------------------------
static SCUDir scudir[] =
  SCU_TP, SCU_XP, SCU_YP, SCU_ZP, SCU_TM, SCU_XM, SCU_YM, SCU_ZM
//  Rarg (for SCU receives) never changes, since it receives into
SCUDirArg * Xarg[8];
SCUDirArg * Rarg[8];
  //  Set up SCU buffer parameters.  T direction is special, since
    Rarg[i] = ( SCUDirArg * ) smalloc ( sizeof( SCUDirArg ) );
    Xarg[i] = ( SCUDirArg * ) smalloc ( sizeof( SCUDirArg ) );
    Rarg[i]->Init( chi_off_node[i], scudir[i], SCU_REC,
    Xarg[i]->Init( ( void * ) 0, scudir[i], SCU_SEND, blklen[j],
  //  SCU transfer structure to get links from off node and a
  SCUDirArg X((void *) 0, SCU_TP, SCU_SEND, 1);
  SCUDirArg R((void *) 0, SCU_TP, SCU_REC, 1);
        X.Init( v, scudir[n], SCU_SEND, 18 );
        R.Init( mtmp, scudir[n+4], SCU_REC, 18 );
        SCUTrans( &X );
        SCUTrans( &R );
        SCUTransComplete();
extern void dirac_SCU( SCUDirArg ** Xarg, SCUDirArg ** Rarg, IFloat * a,
  dirac_SCU( Xarg, Rarg, a, a_odd, Xoffset, ToffsetP, ToffsetM, countP,
-----------------------------------------------------------------
./src/util/dirac_op/d_op_stag/qcdsp/stag_scu.C
-----------------------------------------------------------------
SCUDirArg sarg[16];
SCUDirArg *sargpF[8];
SCUDirArg *sargpB[8];
const SCUDir dir[] = {
  SCU_TP, SCU_TM, SCU_XP, SCU_XM, SCU_YP, SCU_YM, SCU_ZP, SCU_ZM,
  SCU_TP, SCU_TM, SCU_XP, SCU_XM, SCU_YP, SCU_YM, SCU_ZP, SCU_ZM,
const SCUXR xr[] = {
  SCU_SEND, SCU_REC, SCU_SEND, SCU_REC,// Used in forward communication
  SCU_SEND, SCU_REC, SCU_SEND, SCU_REC,
  SCU_REC, SCU_SEND, SCU_REC, SCU_SEND,// Used in backward communication
  SCU_REC, SCU_SEND, SCU_REC, SCU_SEND
extern "C" void StagSCUSetup()
extern "C" void StagSCUCommForward( unsigned int *dma )
  SCUTrans ( sargpF, 8 );
extern "C" void StagSCUCommBackward( unsigned int *dma )
  SCUTrans ( sargpB, 8 );
extern "C" void StagSCUComplete()
  SCUTransComplete();
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdoc/wfm_comm.C
-----------------------------------------------------------------
#ifdef USE_COMMS_SCU
  static const SCUDir plus_dirs[] = { SCU_XP,SCU_YP,SCU_ZP,SCU_TP};
  static const SCUDir minus_dirs[]= { SCU_XM,SCU_YM,SCU_ZM,SCU_TM};
  SendOps[0] = new SCUDirArgIR [8];
  SendOps[1] = new SCUDirArgIR [8];
  RecvOps[0] = new SCUDirArgIR [8];
  RecvOps[1] = new SCUDirArgIR [8];
  DA_multi   = new SCUDirArgMulti[2];
//  printf("Initialising SCU for Dslash IR %d %d\n",IR,IR+1);
			     SCU_SEND,
			       SCU_SEND,
			       SCU_REC,
			     SCU_REC,
			   SCU_REC,
				 SCU_REC,
			       SCU_REC,
			     SCU_REC,
//    printf("Initialised SCU regs\n");
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp/wfm_sublatt_pointers.C
-----------------------------------------------------------------
      them in one word ready to be stored in the SCU DMA registers. 
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp/wilson_scu.C
-----------------------------------------------------------------
SCUDirArg arg[16];
SCUDirArg *argpF[8];
SCUDirArg *argpB[8];
const SCUDir dir[] = {
  SCU_XP, SCU_XM, SCU_YP, SCU_YM, SCU_ZP, SCU_ZM, SCU_TP, SCU_TM,
  SCU_XP, SCU_XM, SCU_YP, SCU_YM, SCU_ZP, SCU_ZM, SCU_TP, SCU_TM
const SCUXR xr[] = {
  SCU_SEND, SCU_REC, SCU_SEND, SCU_REC,
  SCU_SEND, SCU_REC, SCU_SEND, SCU_REC,
  SCU_REC, SCU_SEND, SCU_REC, SCU_SEND,
  SCU_REC, SCU_SEND, SCU_REC, SCU_SEND
extern "C" void WilsonSCUSetDMA( unsigned int X, unsigned int Y, 
  SCUSetDMA ( argpF, j/2 );
extern "C" void WilsonSCUCommForward(
  SCUTransAddr( argpF, j );
extern "C" void WilsonSCUCommBackward(
  SCUTransAddr( argpB, j );
extern "C" void WilsonSCUComplete()
  SCUTransComplete();
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_lcl_nos/wfm_sublatt_pointers.C
-----------------------------------------------------------------
      them in one word ready to be stored in the SCU DMA registers. 
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_lcl_nos/wilson_init.C
-----------------------------------------------------------------
  wfm_wire_map[0] = SCURemap( SCU_XP );
  wfm_wire_map[1] = SCURemap( SCU_XM );
  wfm_wire_map[2] = SCURemap( SCU_YP );
  wfm_wire_map[3] = SCURemap( SCU_YM );
  wfm_wire_map[4] = SCURemap( SCU_ZP );
  wfm_wire_map[5] = SCURemap( SCU_ZM );
  wfm_wire_map[6] = SCURemap( SCU_TP );
  wfm_wire_map[7] = SCURemap( SCU_TM );
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_nos/wfm_sublatt_pointers.C
-----------------------------------------------------------------
      them in one word ready to be stored in the SCU DMA registers. 
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_nos/wilson_init.C
-----------------------------------------------------------------
  wfm_wire_map[0] = SCURemap( SCU_XP );
  wfm_wire_map[1] = SCURemap( SCU_XM );
  wfm_wire_map[2] = SCURemap( SCU_YP );
  wfm_wire_map[3] = SCURemap( SCU_YM );
  wfm_wire_map[4] = SCURemap( SCU_ZP );
  wfm_wire_map[5] = SCURemap( SCU_ZM );
  wfm_wire_map[6] = SCURemap( SCU_TP );
  wfm_wire_map[7] = SCURemap( SCU_TM );
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_nos_hdw_diag/wfm_sublatt_pointers.C
-----------------------------------------------------------------
      them in one word ready to be stored in the SCU DMA registers. 
-----------------------------------------------------------------
./src/util/dirac_op/d_op_wilson/qcdsp_nos_hdw_diag/wilson_init.C
-----------------------------------------------------------------
  wfm_wire_map[0] = SCURemap( SCU_XP );
  wfm_wire_map[1] = SCURemap( SCU_XM );
  wfm_wire_map[2] = SCURemap( SCU_YP );
  wfm_wire_map[3] = SCURemap( SCU_YM );
  wfm_wire_map[4] = SCURemap( SCU_ZP );
  wfm_wire_map[5] = SCURemap( SCU_ZM );
  wfm_wire_map[6] = SCURemap( SCU_TP );
  wfm_wire_map[7] = SCURemap( SCU_TM );
-----------------------------------------------------------------
./src/util/error/qcdoc/error_hdwcheck.C
-----------------------------------------------------------------
#ifdef HAVE_QCDOCOS_SCU_CHECKSUM_H
    fprintf(stderr,"%s::%s: SCU Checksum mismatch\n",cname,fname);
  printf("This version of QOS does not have SCU checksum class\n");
-----------------------------------------------------------------
./src/util/gjp/gjp.C
-----------------------------------------------------------------
SCUDir gjp_scu_dir[10] = { SCU_XP, SCU_XM, SCU_YP, SCU_YM,	
                           SCU_ZP, SCU_ZM, SCU_TP, SCU_TM,
                           SCU_TP, SCU_TM };
     // set to:  SCU_XP, SCU_XM, SCU_YP, SCU_YM,
     // SCU_ZP, SCU_ZM, SCU_TP, SCU_TM, s_p, s_m
     // where s_p, s_m is one of the SCU_*P, SCU_*M.
  gjp_scu_dir[0] = SCU_XP;
  gjp_scu_dir[1] = SCU_XM;
  gjp_scu_dir[2] = SCU_YP;
  gjp_scu_dir[3] = SCU_YM;
  gjp_scu_dir[4] = SCU_ZP;
  gjp_scu_dir[5] = SCU_ZM;
  gjp_scu_dir[6] = SCU_TP;
  gjp_scu_dir[7] = SCU_TM;
  gjp_scu_dir[8] = SCU_SP;
  gjp_scu_dir[9] = SCU_SM;
  gjp_scu_wire_map[2*i]   = SCURemap(gjp_scu_dir[2*i]);
  gjp_scu_wire_map[2*i+1] = SCURemap(gjp_scu_dir[2*i+1]);
-----------------------------------------------------------------

-----------------------------------------------------------------
./src/util/lattice/f_dwf_base/qcdoc/f_dwf_base_force.C
-----------------------------------------------------------------
  SCUDirArgIR Send[4];
  SCUDirArgIR Recv[4];
  SCUDMAInst *dma[2];
  for(int i = 0;i<2;i++) dma[i] = new SCUDMAInst;
      Recv[mu].Init(gjp_scu_dir[2*mu],SCU_REC,dma,2);
      Send[mu].Init(gjp_scu_dir[2*mu+1],SCU_SEND,dma,2);
// to allow SCU transfers to happen face-by-face in the outermost
-----------------------------------------------------------------



-----------------------------------------------------------------
./src/util/qcdio/comsrc/iostyle.C
-----------------------------------------------------------------
    //    const SCUDir pos_dir[] = { SCU_XP, SCU_YP, SCU_ZP, SCU_TP };
    //    const SCUDir neg_dir[] = { SCU_XM, SCU_YM, SCU_ZM, SCU_TM };
    SCUDirArg send, recv;
      send.Init(sendbuf, SCU_XP, SCU_SEND, xblk);
      recv.Init(recvbuf, SCU_XM, SCU_REC,  xblk);
      send.Init(sendbuf, SCU_XM, SCU_SEND, xblk);
      recv.Init(recvbuf, SCU_XP, SCU_REC,  xblk);
    SCUTrans(&send);
    SCUTrans(&recv);
    SCUTransComplete();
  int useSCU = 1;
  if(qio_arg.Ynodes() <= 1) useSCU = 0;
    SCUDirArg send, recv;
      if(useSCU) {
	send.Init(sendbuf, SCU_YP, SCU_SEND, xblk);
	recv.Init(recvbuf, SCU_YM, SCU_REC,  xblk);
      if(useSCU) {
	send.Init(sendbuf, SCU_YM, SCU_SEND, xblk);
	recv.Init(recvbuf, SCU_YP, SCU_REC,  xblk);
    if(useSCU) {
      SCUTrans(&send);
      SCUTrans(&recv);
    if(useSCU) {
      SCUTransComplete();
  int useSCU = 1;
  if(qio_arg.Znodes() <= 1) useSCU = 0;
    SCUDirArg send, recv;
	if(useSCU) {
	  send.Init(sendbuf, SCU_ZP, SCU_SEND, xblk);
	  recv.Init(recvbuf, SCU_ZM, SCU_REC,  xblk);
	if(useSCU) {
	  send.Init(sendbuf, SCU_ZM, SCU_SEND, xblk);
	  recv.Init(recvbuf, SCU_ZP, SCU_REC,  xblk);
      if(useSCU) {
	SCUTrans(&send);
	SCUTrans(&recv);
      if(useSCU) {
	SCUTransComplete();
  int useSCU = 1;
  if(qio_arg.Tnodes() <= 1) useSCU = 0;
    SCUDirArg send, recv;
	  if(useSCU) {
	    send.Init(sendbuf, SCU_TP, SCU_SEND, xblk);
	    recv.Init(recvbuf, SCU_TM, SCU_REC,  xblk);
	  if(useSCU) {
	    send.Init(sendbuf, SCU_TM, SCU_SEND, xblk);
	    recv.Init(recvbuf, SCU_TP, SCU_REC,  xblk);
	if(useSCU) {
	  SCUTrans(&send);
	  SCUTrans(&recv);
	if(useSCU) {
	  SCUTransComplete();
  int useSCU = 1;
  if(qio_arg.Snodes() <= 1) useSCU = 0;
  SCUDirArg send, recv;
	  if(useSCU) {
	    send.Init(sendbuf, SCU_SP, SCU_SEND, xblk);
	    recv.Init(recvbuf, SCU_SM, SCU_REC,  xblk);
	  if(useSCU) {
	    send.Init(sendbuf, SCU_SM, SCU_SEND, xblk);
	    recv.Init(recvbuf, SCU_SP, SCU_REC,  xblk);
	if(useSCU) {
	  SCUTrans(&send);
	  SCUTrans(&recv);
	if(useSCU) {
	  SCUTransComplete();
  SCUDirArg  socket;
    socket.Init(data, SCU_SM, SCU_SEND, datablk);
    SCUTrans(&socket);
    SCUTransComplete();
    socket.Init(data, SCU_SP, SCU_REC, datablk);
    SCUTrans(&socket);
    SCUTransComplete();
      socket.Init(data, SCU_SP, SCU_SEND, datablk);
      SCUTrans(&socket);
      SCUTransComplete();
      socket.Init(data, SCU_SM, SCU_REC, datablk);
      SCUTrans(&socket);
      SCUTransComplete();
      socket.Init(data, SCU_SM, SCU_SEND, datablk);
      SCUTrans(&socket);
      SCUTransComplete();
      socket.Init(data, SCU_SP, SCU_REC, datablk);
      SCUTrans(&socket);
      SCUTransComplete();
-----------------------------------------------------------------
./src/util/qcdio/comsrc/qcdio.C
-----------------------------------------------------------------
    SCUDirArg* datain = new SCUDirArg();
    SCUDirArg* dataout = new SCUDirArg();
    SCUXR posdir_SR, negdir_SR;
      posdir_SR = SCU_REC;
      negdir_SR = SCU_SEND;
      posdir_SR = SCU_SEND;
      negdir_SR = SCU_REC;
          datain->Init( (void*)buf, SCU_XM, negdir_SR, size );
          dataout->Init( (void*)buf, SCU_XP, posdir_SR, size );
          datain->Init( (void*)buf, SCU_YM, negdir_SR, size );
          dataout->Init( (void*)buf, SCU_YP, posdir_SR, size );
          datain->Init( (void*)buf, SCU_ZM, negdir_SR, size );
          dataout->Init( (void*)buf, SCU_ZP, posdir_SR, size );
        SCUTrans(dataout);
        SCUTransComplete();
        SCUTrans(datain);
        SCUTransComplete();
        SCUTrans(datain);
        SCUTransComplete();
        SCUTrans(dataout);
        SCUTransComplete();
-----------------------------------------------------------------
./src/util/qcdio/mpi/qcdio_qprintf.C
-----------------------------------------------------------------
    namespace MPISCU{
    } //namespace MPISCU
-----------------------------------------------------------------
./src/util/qcdio/qcdoc/gsum64ext.C
-----------------------------------------------------------------
void Gsum64Ext::Init(const SCUAxis *axis_p, int Nd)
  SCUAxis axs;
  Gnodes[SCU_X]=SizeX();
  Gnodes[SCU_Y]=SizeY();
  Gnodes[SCU_Z]=SizeZ();
  Gnodes[SCU_T]=SizeT();
  Gnodes[SCU_S]=SizeS();
  Gnodes[SCU_W]=SizeW();
  GCoord[SCU_X]=CoorX();
  GCoord[SCU_Y]=CoorY();
  GCoord[SCU_Z]=CoorZ();
  GCoord[SCU_T]=CoorT();
  GCoord[SCU_S]=CoorS();
  GCoord[SCU_W]=CoorW();
    if ( ! nstat_p->SCULocal[axs] ) { 
  SCUAxis axs;
  SCUAxis axsnext;
void Gsum64Ext::Reduce(SCUAxis axis,GsumReduceType type)
  if(! nstat_p->SCULocal[axis]) { // if this dimension non-trivial
    if ( ! nstat_p->SCULocal[axis] ) {  // If this dimension is non-trivial
    if ( ! nstat_p->SCULocal[axis] ) {  // If this dimension is non-trivial
    if ( ! nstat_p->SCULocal[axis] ) {   // If this dimension is non-trivial
void Gsum64Ext::Prepare(SCUAxis axis)
void Gsum64Ext::Comm(SCUAxis axis)
const SCUDir  Gsum64Ext::sdir[] = { SCU_TP, SCU_XP, SCU_YP, SCU_ZP, SCU_SP, SCU_WP,
				 SCU_TM, SCU_XM, SCU_YM, SCU_ZM, SCU_SM, SCU_WM } ;
const SCUDir  Gsum64Ext::rdir[] = { SCU_TM, SCU_XM, SCU_YM, SCU_ZM, SCU_SM, SCU_WM,
				 SCU_TP, SCU_XP, SCU_YP, SCU_ZP, SCU_SP, SCU_WP } ;
const SCUAxis Gsum64Ext::axis[] = { SCU_T,  SCU_X,  SCU_Y,  SCU_Z,  SCU_S,  SCU_W  } ;

