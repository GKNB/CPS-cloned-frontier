#include<config.h>
CPS_START_NAMESPACE

Qdaemon state is:
	qdaemon task is LOAD
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD_ARGS
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD_ARGS
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is EXEC_IO
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates
Lattice::Lattice() :
	Reseted random number generator with seed = 678040585
Lattice::Lattice() :
	Disordered starting configuration
Lattice::Lattice() :
	Checking gauge field across s-slices
Lattice::GsoCheck() :
	Plaquette, checksum test successful
DiracOp::DiracOp(L&,V*,V*,CgArg,CnvFrmType) : Clock (12.5 MHz cycles) = 8913722
	Just enetered
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 0 to 2
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 0 to 2
(none)::CanonToAnything(CAP,StrOrdType) :
	Converting gauge field order: CANONICAL -> WILSON
 ::p2vWilsoLib() :
	Moving wfm0 to CRAM0, dest=809800, start= 5124a, end = 51526, len = 2dc
 ::p2vWilsoLib() :
	Moving wfm1 to CRAM1, dest=809c00, start= 51526, end = 516cb, len = 1a5
DiracOp::InvCg(V*,V*,F,F*) :
	stp_cnd =2.084530e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[0]|^2 = 9.761375e+03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[1]|^2 = 7.087208e+02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[2]|^2 = 9.695741e+01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[3]|^2 = 2.308811e+01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[4]|^2 = 5.548282e+00
DiracOp::InvCg(V*,V*,F,F*) :
	|res[5]|^2 = 1.517489e+00
DiracOp::InvCg(V*,V*,F,F*) :
	|res[6]|^2 = 4.210975e-01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[7]|^2 = 1.133519e-01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[8]|^2 = 3.113571e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[9]|^2 = 8.568838e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[10]|^2 = 2.401204e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[11]|^2 = 6.394112e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[12]|^2 = 1.682053e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[13]|^2 = 4.373267e-05
DiracOp::InvCg(V*,V*,F,F*) :
	|res[14]|^2 = 1.184782e-05
DiracOp::InvCg(V*,V*,F,F*) :
	|res[15]|^2 = 3.222061e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[16]|^2 = 8.427174e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[17]|^2 = 2.193051e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[18]|^2 = 5.743726e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[19]|^2 = 1.567434e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[20]|^2 = 4.419591e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[21]|^2 = 1.256252e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[22]|^2 = 3.585978e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[23]|^2 = 1.016623e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[24]|^2 = 2.826439e-11
DiracOp::InvCg(V*,V*,F,F*) :
	|res[25]|^2 = 7.482742e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[26]|^2 = 2.015367e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[27]|^2 = 5.549784e-13
DiracOp::InvCg(V*,V*,F,F*) :
	|res[28]|^2 = 1.523789e-13
DiracOp::InvCg(V*,V*,F,F*) :
	|res[29]|^2 = 4.357316e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[30]|^2 = 1.238844e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[31]|^2 = 3.491613e-15
DiracOp::InvCg(V*,V*,F,F*) :
	|res[32]|^2 = 9.994720e-16
DiracOp::InvCg(V*,V*,F,F*) :
	|res[33]|^2 = 2.765183e-16
DiracOp::InvCg(V*,V*,F,F*) :
	|res[34]|^2 = 7.644239e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[35]|^2 = 2.112553e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[36]|^2 = 5.751419e-18
DiracOp::InvCg(V*,V*,F,F*) :
	True |res| / |src| = 2.248728e-07, iter = 37
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 2 to 0
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 2 to 0
Lattice::Convert(StrOrdType) :
	Converting gauge field order: WILSON -> CANONICAL
DiracOp::~DiracOp() : Clock (12.5 MHz cycles) = 28872684
	Exiting
Lattice::~Lattice() :
	Checking gauge field across s-slices
Lattice::GsoCheck() :
	Plaquette, checksum test successful
Lattice::Lattice() :
	Memory starting configuration addr = 13e4c
Lattice::Convert(StrOrdType) :
	No conversion necessary from 0 to 0
Lattice::Lattice() :
	Checking gauge field across s-slices
Lattice::GsoCheck() :
	Plaquette, checksum test successful
DiracOp::DiracOp(L&,V*,V*,CgArg,CnvFrmType) : Clock (12.5 MHz cycles) = 36740442
	Just enetered
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 0 to 2
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 0 to 2
(none)::CanonToAnything(CAP,StrOrdType) :
	Converting gauge field order: CANONICAL -> WILSON
 ::p2vWilsoLib() :
	Moving wfm0 to CRAM0, dest=809800, start= 5124a, end = 51526, len = 2dc
 ::p2vWilsoLib() :
	Moving wfm1 to CRAM1, dest=809c00, start= 51526, end = 516cb, len = 1a5
DiracOp::InvCg(V*,V*,F,F*) :
	stp_cnd =2.082694e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[0]|^2 = 8.519661e+03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[1]|^2 = 4.613428e+02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[2]|^2 = 7.660282e+01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[3]|^2 = 1.900613e+01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[4]|^2 = 4.553062e+00
DiracOp::InvCg(V*,V*,F,F*) :
	|res[5]|^2 = 1.027175e+00
DiracOp::InvCg(V*,V*,F,F*) :
	|res[6]|^2 = 2.512010e-01
DiracOp::InvCg(V*,V*,F,F*) :
	|res[7]|^2 = 5.731526e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[8]|^2 = 1.316732e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[9]|^2 = 3.103587e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[10]|^2 = 6.927300e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[11]|^2 = 1.569385e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[12]|^2 = 3.791267e-05
DiracOp::InvCg(V*,V*,F,F*) :
	|res[13]|^2 = 8.937352e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[14]|^2 = 2.068765e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[15]|^2 = 4.904699e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[16]|^2 = 1.154991e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[17]|^2 = 2.607115e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[18]|^2 = 6.050105e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[19]|^2 = 1.462437e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[20]|^2 = 3.536873e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[21]|^2 = 8.400433e-11
DiracOp::InvCg(V*,V*,F,F*) :
	|res[22]|^2 = 2.022961e-11
DiracOp::InvCg(V*,V*,F,F*) :
	|res[23]|^2 = 4.913135e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[24]|^2 = 1.152713e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[25]|^2 = 2.620323e-13
DiracOp::InvCg(V*,V*,F,F*) :
	|res[26]|^2 = 5.986199e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[27]|^2 = 1.395146e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[28]|^2 = 3.270192e-15
DiracOp::InvCg(V*,V*,F,F*) :
	|res[29]|^2 = 7.851783e-16
DiracOp::InvCg(V*,V*,F,F*) :
	|res[30]|^2 = 1.907101e-16
DiracOp::InvCg(V*,V*,F,F*) :
	|res[31]|^2 = 4.527315e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[32]|^2 = 1.032777e-17
DiracOp::InvCg(V*,V*,F,F*) :
	True |res| / |src| = 2.186257e-07, iter = 33
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 2 to 0
Fdwf::Fconvert(V*,StrOrdType,StrOrdType) :
	Converting frm field str ord from 2 to 0
Lattice::Convert(StrOrdType) :
	Converting gauge field order: WILSON -> CANONICAL
DiracOp::~DiracOp() : Clock (12.5 MHz cycles) = 54831478
	Exiting
Lattice::~Lattice() :
	Checking gauge field across s-slices
Lattice::GsoCheck() :
	Plaquette, checksum test successful
MkerExecAck:  starting to check program exit status

MkerExecAck:  Exit information for node
	(  0,  0)    m(  0,  0,  0,  0)    p(  0,  0,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  1)    m(  0,  0,  0,  1)    p(  0,  0,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  2)    m(  0,  0,  1,  0)    p(  0,  0,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  3)    m(  0,  0,  1,  1)    p(  0,  0,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  4)    m(  0,  1,  0,  0)    p(  0,  1,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  5)    m(  0,  1,  0,  1)    p(  0,  1,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  6)    m(  0,  1,  1,  0)    p(  0,  1,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  7)    m(  0,  1,  1,  1)    p(  0,  1,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  8)    m(  0,  2,  0,  0)    p(  0,  2,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0,  9)    m(  0,  2,  0,  1)    p(  0,  2,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 10)    m(  0,  2,  1,  0)    p(  0,  2,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 11)    m(  0,  2,  1,  1)    p(  0,  2,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 12)    m(  0,  3,  0,  0)    p(  0,  3,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 13)    m(  0,  3,  0,  1)    p(  0,  3,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 14)    m(  0,  3,  1,  0)    p(  0,  3,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 15)    m(  0,  3,  1,  1)    p(  0,  3,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 16)    m(  1,  0,  0,  0)    p(  1,  0,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 17)    m(  1,  0,  0,  1)    p(  1,  0,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 18)    m(  1,  0,  1,  0)    p(  1,  0,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 19)    m(  1,  0,  1,  1)    p(  1,  0,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 20)    m(  1,  1,  0,  0)    p(  1,  1,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 21)    m(  1,  1,  0,  1)    p(  1,  1,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 22)    m(  1,  1,  1,  0)    p(  1,  1,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 23)    m(  1,  1,  1,  1)    p(  1,  1,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 24)    m(  1,  2,  0,  0)    p(  1,  2,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 25)    m(  1,  2,  0,  1)    p(  1,  2,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 26)    m(  1,  2,  1,  0)    p(  1,  2,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 27)    m(  1,  2,  1,  1)    p(  1,  2,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 28)    m(  1,  3,  0,  0)    p(  1,  3,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 29)    m(  1,  3,  0,  1)    p(  1,  3,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 30)    m(  1,  3,  1,  0)    p(  1,  3,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 31)    m(  1,  3,  1,  1)    p(  1,  3,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 32)    m(  2,  0,  0,  0)    p(  2,  0,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 33)    m(  2,  0,  0,  1)    p(  2,  0,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 34)    m(  2,  0,  1,  0)    p(  2,  0,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 35)    m(  2,  0,  1,  1)    p(  2,  0,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 36)    m(  2,  1,  0,  0)    p(  2,  1,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 37)    m(  2,  1,  0,  1)    p(  2,  1,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 38)    m(  2,  1,  1,  0)    p(  2,  1,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 39)    m(  2,  1,  1,  1)    p(  2,  1,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 40)    m(  2,  2,  0,  0)    p(  2,  2,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 41)    m(  2,  2,  0,  1)    p(  2,  2,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 42)    m(  2,  2,  1,  0)    p(  2,  2,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 43)    m(  2,  2,  1,  1)    p(  2,  2,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 44)    m(  2,  3,  0,  0)    p(  2,  3,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 45)    m(  2,  3,  0,  1)    p(  2,  3,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 46)    m(  2,  3,  1,  0)    p(  2,  3,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 47)    m(  2,  3,  1,  1)    p(  2,  3,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 48)    m(  3,  0,  0,  0)    p(  3,  0,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 49)    m(  3,  0,  0,  1)    p(  3,  0,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 50)    m(  3,  0,  1,  0)    p(  3,  0,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 51)    m(  3,  0,  1,  1)    p(  3,  0,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 52)    m(  3,  1,  0,  0)    p(  3,  1,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 53)    m(  3,  1,  0,  1)    p(  3,  1,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 54)    m(  3,  1,  1,  0)    p(  3,  1,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 55)    m(  3,  1,  1,  1)    p(  3,  1,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 56)    m(  3,  2,  0,  0)    p(  3,  2,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 57)    m(  3,  2,  0,  1)    p(  3,  2,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 58)    m(  3,  2,  1,  0)    p(  3,  2,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 59)    m(  3,  2,  1,  1)    p(  3,  2,  1,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 60)    m(  3,  3,  0,  0)    p(  3,  3,  0,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 61)    m(  3,  3,  0,  1)    p(  3,  3,  0,  1)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 62)    m(  3,  3,  1,  0)    p(  3,  3,  1,  0)
	User return value:	1

MkerExecAck:  Exit information for node
	(  0, 63)    m(  3,  3,  1,  1)    p(  3,  3,  1,  1)
	User return value:	1
AnalyzeQCDSP::SCUCheck:  SCUDebug mode 0 doesn't allow analysis
MkerExecAck:  SCUCheck could not be run

Qdaemon state is:
	qdaemon task is EXEC_IO
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates
CPS_END_NAMESPACE
