#include<config.h>
CPS_START_NAMESPACE

Qdaemon state is:
	qdaemon task is LOAD
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD_ARGS
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is LOAD_ARGS
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates

Qdaemon state is:
	qdaemon task is EXEC_IO
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates
Lattice::Lattice() :
	Reseted random number generator with seed = 678040585
Lattice::Lattice() :
	Ordered starting configuration
main: Total sites :    3072
iteration # = 0
main: spectroscopy staggered with Point Source
Aots starts....
QuarkPropSMng::qadd(QuarkPropS *) :
	QuarkPropS of id = 1 is registered
DiracOp::DiracOp(L&,V*,V*,CgArg,CnvFrmType) : Clock (12.5 MHz cycles) = 8980311
	Just enetered
(none)::CanonToAnything(CAP,StrOrdType) :
	Converting gauge field order: CANONICAL -> STAG
 ::p2vStagDs() :
	Moving stag_ds to CRAM, dest=809800, start= 551aa, end = 5542c, len = 282
DiracOp::InvCg(V*,V*,F,F*) :
	stp_cnd =4.000000e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[0]|^2 = 4.000000e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[1]|^2 = 6.187965e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[2]|^2 = 2.063164e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[3]|^2 = 1.130942e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[4]|^2 = 9.017588e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[5]|^2 = 9.261616e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[6]|^2 = 9.665572e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[7]|^2 = 6.246730e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[8]|^2 = 1.386478e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[9]|^2 = 7.500032e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[10]|^2 = 2.743014e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[11]|^2 = 7.497560e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[12]|^2 = 1.632706e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[13]|^2 = 2.617338e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[14]|^2 = 2.725619e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[15]|^2 = 1.586821e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[16]|^2 = 7.160063e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[17]|^2 = 1.470504e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[18]|^2 = 4.254113e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[19]|^2 = 2.153250e-15
DiracOp::InvCg(V*,V*,F,F*) :
	|res[20]|^2 = 5.144538e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[21]|^2 = 7.263045e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[22]|^2 = 3.994607e-18
DiracOp::InvCg(V*,V*,F,F*) :
	True |res| / |src| = 3.847383e-07, iter = 23
Lattice::Convert(StrOrdType) :
	Converting gauge field order: STAG -> CANONICAL
DiracOp::~DiracOp() : Clock (12.5 MHz cycles) = 18901022
	Exiting
DiracOp::DiracOp(L&,V*,V*,CgArg,CnvFrmType) : Clock (12.5 MHz cycles) = 19351209
	Just enetered
(none)::CanonToAnything(CAP,StrOrdType) :
	Converting gauge field order: CANONICAL -> STAG
 ::p2vStagDs() :
	Moving stag_ds to CRAM, dest=809800, start= 551aa, end = 5542c, len = 282
DiracOp::InvCg(V*,V*,F,F*) :
	stp_cnd =4.000000e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[0]|^2 = 4.000000e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[1]|^2 = 6.187965e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[2]|^2 = 2.063164e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[3]|^2 = 1.130942e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[4]|^2 = 9.017588e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[5]|^2 = 9.261616e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[6]|^2 = 9.665572e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[7]|^2 = 6.246730e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[8]|^2 = 1.386478e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[9]|^2 = 7.500032e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[10]|^2 = 2.743014e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[11]|^2 = 7.497560e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[12]|^2 = 1.632706e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[13]|^2 = 2.617338e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[14]|^2 = 2.725619e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[15]|^2 = 1.586821e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[16]|^2 = 7.160063e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[17]|^2 = 1.470504e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[18]|^2 = 4.254113e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[19]|^2 = 2.153250e-15
DiracOp::InvCg(V*,V*,F,F*) :
	|res[20]|^2 = 5.144538e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[21]|^2 = 7.263045e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[22]|^2 = 3.994607e-18
DiracOp::InvCg(V*,V*,F,F*) :
	True |res| / |src| = 3.847383e-07, iter = 23
Lattice::Convert(StrOrdType) :
	Converting gauge field order: STAG -> CANONICAL
DiracOp::~DiracOp() : Clock (12.5 MHz cycles) = 29023962
	Exiting
DiracOp::DiracOp(L&,V*,V*,CgArg,CnvFrmType) : Clock (12.5 MHz cycles) = 29433578
	Just enetered
(none)::CanonToAnything(CAP,StrOrdType) :
	Converting gauge field order: CANONICAL -> STAG
 ::p2vStagDs() :
	Moving stag_ds to CRAM, dest=809800, start= 551aa, end = 5542c, len = 282
DiracOp::InvCg(V*,V*,F,F*) :
	stp_cnd =4.000000e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[0]|^2 = 4.000000e-02
DiracOp::InvCg(V*,V*,F,F*) :
	|res[1]|^2 = 6.187965e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[2]|^2 = 2.063164e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[3]|^2 = 1.130942e-03
DiracOp::InvCg(V*,V*,F,F*) :
	|res[4]|^2 = 9.017588e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[5]|^2 = 9.261616e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[6]|^2 = 9.665572e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[7]|^2 = 6.246730e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[8]|^2 = 1.386478e-04
DiracOp::InvCg(V*,V*,F,F*) :
	|res[9]|^2 = 7.500032e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[10]|^2 = 2.743014e-06
DiracOp::InvCg(V*,V*,F,F*) :
	|res[11]|^2 = 7.497560e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[12]|^2 = 1.632706e-07
DiracOp::InvCg(V*,V*,F,F*) :
	|res[13]|^2 = 2.617338e-08
DiracOp::InvCg(V*,V*,F,F*) :
	|res[14]|^2 = 2.725619e-09
DiracOp::InvCg(V*,V*,F,F*) :
	|res[15]|^2 = 1.586821e-10
DiracOp::InvCg(V*,V*,F,F*) :
	|res[16]|^2 = 7.160063e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[17]|^2 = 1.470504e-12
DiracOp::InvCg(V*,V*,F,F*) :
	|res[18]|^2 = 4.254113e-14
DiracOp::InvCg(V*,V*,F,F*) :
	|res[19]|^2 = 2.153250e-15
DiracOp::InvCg(V*,V*,F,F*) :
	|res[20]|^2 = 5.144538e-17
DiracOp::InvCg(V*,V*,F,F*) :
	|res[21]|^2 = 7.263045e-18
DiracOp::InvCg(V*,V*,F,F*) :
	|res[22]|^2 = 3.994607e-18
DiracOp::InvCg(V*,V*,F,F*) :
	True |res| / |src| = 3.847383e-07, iter = 23
Lattice::Convert(StrOrdType) :
	Converting gauge field order: STAG -> CANONICAL
DiracOp::~DiracOp() : Clock (12.5 MHz cycles) = 39941588
	Exiting
QuarkPropSMng::release(int id) :
	QuarkPropS of id = 1 is destroyed
AlgFixGauge.run() starts....
Error in AlgFixGauge::run() :
	Wrong fix_gauge_arg, start = 0, step = 1, num = 24
MkerExecAck:  starting to check program exit status

MkerExecAck:  Exit information for node
	(  0,  0)    m(  0,  0,  0,  0)    p(  0,  0,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  1)    m(  0,  0,  0,  1)    p(  0,  0,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  2)    m(  0,  0,  1,  0)    p(  0,  0,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  3)    m(  0,  0,  1,  1)    p(  0,  0,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  4)    m(  0,  1,  0,  0)    p(  0,  1,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  5)    m(  0,  1,  0,  1)    p(  0,  1,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  6)    m(  0,  1,  1,  0)    p(  0,  1,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  7)    m(  0,  1,  1,  1)    p(  0,  1,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  8)    m(  0,  2,  0,  0)    p(  0,  2,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0,  9)    m(  0,  2,  0,  1)    p(  0,  2,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 10)    m(  0,  2,  1,  0)    p(  0,  2,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 11)    m(  0,  2,  1,  1)    p(  0,  2,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 12)    m(  0,  3,  0,  0)    p(  0,  3,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 13)    m(  0,  3,  0,  1)    p(  0,  3,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 14)    m(  0,  3,  1,  0)    p(  0,  3,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 15)    m(  0,  3,  1,  1)    p(  0,  3,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 16)    m(  1,  0,  0,  0)    p(  1,  0,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 17)    m(  1,  0,  0,  1)    p(  1,  0,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 18)    m(  1,  0,  1,  0)    p(  1,  0,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 19)    m(  1,  0,  1,  1)    p(  1,  0,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 20)    m(  1,  1,  0,  0)    p(  1,  1,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 21)    m(  1,  1,  0,  1)    p(  1,  1,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 22)    m(  1,  1,  1,  0)    p(  1,  1,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 23)    m(  1,  1,  1,  1)    p(  1,  1,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 24)    m(  1,  2,  0,  0)    p(  1,  2,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 25)    m(  1,  2,  0,  1)    p(  1,  2,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 26)    m(  1,  2,  1,  0)    p(  1,  2,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 27)    m(  1,  2,  1,  1)    p(  1,  2,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 28)    m(  1,  3,  0,  0)    p(  1,  3,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 29)    m(  1,  3,  0,  1)    p(  1,  3,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 30)    m(  1,  3,  1,  0)    p(  1,  3,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 31)    m(  1,  3,  1,  1)    p(  1,  3,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 32)    m(  2,  0,  0,  0)    p(  2,  0,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 33)    m(  2,  0,  0,  1)    p(  2,  0,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 34)    m(  2,  0,  1,  0)    p(  2,  0,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 35)    m(  2,  0,  1,  1)    p(  2,  0,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 36)    m(  2,  1,  0,  0)    p(  2,  1,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 37)    m(  2,  1,  0,  1)    p(  2,  1,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 38)    m(  2,  1,  1,  0)    p(  2,  1,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 39)    m(  2,  1,  1,  1)    p(  2,  1,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 40)    m(  2,  2,  0,  0)    p(  2,  2,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 41)    m(  2,  2,  0,  1)    p(  2,  2,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 42)    m(  2,  2,  1,  0)    p(  2,  2,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 43)    m(  2,  2,  1,  1)    p(  2,  2,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 44)    m(  2,  3,  0,  0)    p(  2,  3,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 45)    m(  2,  3,  0,  1)    p(  2,  3,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 46)    m(  2,  3,  1,  0)    p(  2,  3,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 47)    m(  2,  3,  1,  1)    p(  2,  3,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 48)    m(  3,  0,  0,  0)    p(  3,  0,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 49)    m(  3,  0,  0,  1)    p(  3,  0,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 50)    m(  3,  0,  1,  0)    p(  3,  0,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 51)    m(  3,  0,  1,  1)    p(  3,  0,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 52)    m(  3,  1,  0,  0)    p(  3,  1,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 53)    m(  3,  1,  0,  1)    p(  3,  1,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 54)    m(  3,  1,  1,  0)    p(  3,  1,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 55)    m(  3,  1,  1,  1)    p(  3,  1,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 56)    m(  3,  2,  0,  0)    p(  3,  2,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 57)    m(  3,  2,  0,  1)    p(  3,  2,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 58)    m(  3,  2,  1,  0)    p(  3,  2,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 59)    m(  3,  2,  1,  1)    p(  3,  2,  1,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 60)    m(  3,  3,  0,  0)    p(  3,  3,  0,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 61)    m(  3,  3,  0,  1)    p(  3,  3,  0,  1)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 62)    m(  3,  3,  1,  0)    p(  3,  3,  1,  0)
	User return value:	-7

MkerExecAck:  Exit information for node
	(  0, 63)    m(  3,  3,  1,  1)    p(  3,  3,  1,  1)
	User return value:	-7
AnalyzeQCDSP::SCUCheck:  SCUDebug mode 0 doesn't allow analysis
MkerExecAck:  SCUCheck could not be run

Qdaemon state is:
	qdaemon task is EXEC_IO
	qdaemon abort no and resume no
	QCDSP synchronous
	All nodes selected with SCSI tree coordinates
CPS_END_NAMESPACE
