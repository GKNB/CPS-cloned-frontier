dnl--------------------------------------------------------------------
dnl  CVS keywords
dnl
dnl  $Author: chulwoo $
dnl  $Date: 2005-03-07 00:46:11 $
dnl  $Header: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/configure.in,v 1.32 2005-03-07 00:46:11 chulwoo Exp $
dnl  $Id: configure.in,v 1.32 2005-03-07 00:46:11 chulwoo Exp $
dnl  $Name: not supported by cvs2svn $
dnl  $Locker:  $
dnl  $RCSfile: configure.in,v $
dnl  $Revision: 1.32 $
dnl  $Source: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/configure.in,v $
dnl  $State: Exp $
dnl
dnl--------------------------------------------------------------------
AC_INIT(./src/)
dnl AC_CONFIG_HEADERS([conf.h])
AC_CHECK_HEADERS([malloc.h])

dnl Get host and target information:
AC_CANONICAL_TARGET

dnl Set correct compiler information
if test "$cross_compiling" = "yes"; then
   AC_PATH_PROGS(CC, ${host_alias}-gcc)
   AC_PATH_PROGS(CXX, ${host_alias}-g++)
   AC_PATH_PROGS(LD, ${host_alias}-ld)
   AC_PATH_PROGS(AR, ${host_alias}-ar)
   AC_PATH_PROGS(AS, ${host_alias}-as)
   if test -z "$CXX" || test -z "$LD" || test -z "$AR" || test -z "$AS"; then
     echo "Missing required cross-compilation tools"
     exit 1
   fi
else
dnl check if Intel compiler is available if running on 686
   if test "$host" = "i686-pc-linux-gnu" && \
   test "$build" = "i686-pc-linux-gnu"; then
	   CC=""
       AC_CHECK_PROGS(CC, icc, gcc)
       AC_CHECK_PROGS(CXX, icc, g++)
   elif test "$host" = "powerpc-ibm-aix5.2.0.0" ||\
   test "$host" = "powerpc64-unknown-linux-gnu" ;then
	   CC=""
       AC_CHECK_PROGS(CC, xlC, gcc)
       AC_CHECK_PROGS(CXX, xlC, g++)
   else
     AC_PROG_CXX
   fi
   AC_CHECK_PROGS(LD, ld)
   AC_CHECK_PROGS(AR, ar)
   AC_CHECK_PROGS(AS, as)
   if test -z "$CXX" || test -z "$LD" || test -z "$AR" || test -z "$AS"; then
     echo "Missing required compilation tools"
     exit 1
   fi
fi

dnl If using this script, then we are not making the QCDSP version.
NOT_TESTING_QCDSP="yes"
AC_SUBST(NOT_TESTING_QCDSP)

dnl Check for maths library
AC_CHECK_LIB(m, sin, ,echo "CPS needs the math library - bailing out"; exit 1)

dnl Set the relevant include files
topwd_srcdir=`pwd`
AC_SUBST(topwd_srcdir)

dnl This is the _default_ default
namespace_default="yes" 

dnl What target are we compiling for?
AC_ARG_ENABLE(target, 
	AC_HELP_STRING([--enable-target], 
		[What target are we compiling for? (default=noarch)]), 
	,[enable_target="noarch"])
AC_MSG_CHECKING([what target we are compiling for])
AC_MSG_RESULT($enable_target)

CFLAGS=""
CXXFLAGS=""
dnl Can add more cases as we need to, e.g. QCDSP
if test "$enable_target" = "qcdoc"; then
   CC="env QGCC_EXEC_PREFIX=\${QOSLIB} ${CC}"
   CXX="env QGCC_EXEC_PREFIX=\${QOSLIB} ${CXX}"
   AS="env QGCC_EXEC_PREFIX=\${QOSLIB} ${AS}"
   AR="env QGCC_EXEC_PREFIX=\${QOSLIB} ${AR}"
   LD="env QGCC_EXEC_PREFIX=\${QOSLIB} ${LD}"
   INCLUDE_FLAGS=""
   CFLAGS="-D_GCC_"
   CXXFLAGS="-D_GCC_"
   ASFLAGS=""
   LDFLAGS="-pg"

   ARCH="QCDOC"
   ARCHDIR="QCDOC_DIR"
   DFLAGS=""
   TESTING_PARALLEL="yes";
   namespace_default="no" 

elif test "$enable_target" = "mpi"; then
   CXX=""
   AC_CHECK_PROGS(CXX, mpic++ mpiCC mpCC, g++)
   if test "$CXX" = "g++"; then
     AC_MSG_NOTICE([Path is $PATH])
     AC_MSG_WARN([Using g++])
     AC_SEARCH_LIBS(MPI_Init, mpi mpich, ,echo "CPS needs the MPI library for a parallel build - bailing out."; exit 1)
   fi
   DFLAGS=""
   TESTING_PARALLEL="yes";
   ARCH=cpsMPI
   ARCHDIR="MPI_DIR"

else

   DFLAGS=""
   ARCH=NOARCH
   ARCHDIR="NOARCH_DIR"
   TESTING_PARALLEL="no";
fi


dnl Need to put in machine/compiler specific optimisation flags here
AC_ARG_ENABLE(optimise, 
	AC_HELP_STRING([--enable-optimise], 
	       [Compile with maximum optimisation. (default=yes)]),
	,[enable_optimise="yes"])
AC_MSG_CHECKING([if optimising])
AC_MSG_RESULT($enable_optimise)
if test "$enable_optimise" = "yes"; then
   CFLAGS="${CFLAGS} -O3"
   CXXFLAGS="${CXXFLAGS} -O3"
fi


dnl -O0 flag should overide any previous optimisation declarations
AC_ARG_ENABLE(debug, 
	AC_HELP_STRING([--enable-debug], 
		[Compile with debug information. (default=no)]),  
	,[enable_debug="no"])
AC_MSG_CHECKING([if debugging])
AC_MSG_RESULT($enable_debug)
if test "$enable_debug" = "yes"; then
   CFLAGS="${CFLAGS} -g -O0"
   CXXFLAGS="${CXXFLAGS} -g -O0"
fi


dnl Are we compiling with gnu multiprecision library?
AC_ARG_ENABLE(gmp, 
	AC_HELP_STRING([--enable-gmp], 
		[Compile with GNU Multiprecision lib. (default=no)]), 
	,[enable_gmp="no"])
AC_MSG_CHECKING([if including gmp])
AC_MSG_RESULT($enable_gmp)
if test "$enable_gmp" = "no"; then
   DFLAGS=""
else
   LDFLAGS="${LDFLAGS} -L${enable_gmp}/lib -lgmp"
   INCLUDE_FLAGS="${INCLUDE_FLAGS} -I${enable_gmp}/include"
   DFLAGS="${DFLAGS} -DGMP"
fi

if test "$TESTING_PARALLEL" = "yes"; then
   ENABLE_PARALLEL="define PARALLEL"
else
   ENABLE_PARALLEL="undef PARALLEL"
fi
	
dnl Shall we use the cps namespace?
AC_ARG_ENABLE(namespace, 
	AC_HELP_STRING([--enable-namespace],
		[Build the library inside a 'cps' namespace. (default=no for QCDOC, yes otherwise)]),
	,[enable_namespace=$namespace_default])
AC_MSG_CHECKING([whether we are using the namespace])
AC_MSG_RESULT($enable_namespace)
	
if test "$enable_namespace" = "yes"
then
    if test "$enable_target" = "mpi"
    then
        CPS_END_NAMESPACE="}" 
        CPS_START_NAMESPACE="namespace cps { using MPISCU::printf; using MPISCU::vprintf;"
        USING_NAMESPACE_CPS="using namespace cps;"
    else
        CPS_END_NAMESPACE="}" 
        CPS_START_NAMESPACE="namespace cps {"
        USING_NAMESPACE_CPS="using namespace cps;"
    fi
fi

dnl Make visible all variables declared above
AC_SUBST(AR)
AC_SUBST(ARCH)
AC_SUBST(ARCHDIR)
AC_SUBST(AS)
AC_SUBST(ASFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(DFLAGS)
AC_SUBST(INCLUDE_FLAGS)
AC_SUBST(LD)
AC_SUBST(LDFLAGS)
AC_SUBST(TESTING_PARALLEL)
AC_SUBST(ENABLE_PARALLEL)
AC_SUBST(QOS)
AC_SUBST(DO_GMP)
AC_SUBST(CPS_END_NAMESPACE)
AC_SUBST(CPS_START_NAMESPACE)
AC_SUBST(USING_NAMESPACE_CPS)



dnl temporary hack until qos is more mature
if test "$enable_target" = "qcdoc"; then
   CWD="/host/${USER}"
else
   CWD=""
fi
AC_SUBST(CWD)


dnl Single/double precision switch:
AC_ARG_ENABLE(double-prec, 
	AC_HELP_STRING([--enable-double-prec],
		[Build the library in double precision (default=yes)]),
	,[enable_double_precision="yes"])
AC_MSG_CHECKING([if double-prec is enabled])
AC_MSG_RESULT($enable_double_precision)
if test "$enable_double_precision" = "yes"; then
  GSUMPRECISION="double"
  LOCALPRECISION="double"
  PRECDIR="DOUBLE_DIR"
else
  GSUMPRECISION="double"
  LOCALPRECISION="float"
  PRECDIR="FLOAT_DIR"
fi
AC_SUBST(GSUMPRECISION)
AC_SUBST(LOCALPRECISION)
AC_SUBST(PRECDIR)

dnl configuring version number
.  $srcdir/VERSION
echo CPS source: $srcdir
echo "CPS Version MAJOR: ${VERSION_MAJOR}"
echo "CPS Version MINOR: ${VERSION_MINOR}"
echo "CPS Version SUB:   ${VERSION_SUB}"
echo Version ${VERSION_STR}
AC_SUBST(VERSION_MAJOR)
AC_SUBST(VERSION_MINOR)
AC_SUBST(VERSION_SUB)
AC_SUBST(VERSION_STR)

AC_PROG_INSTALL

AC_CHECK_PROG(have_doxygen, doxygen, "yes")
AC_CHECK_TYPES(bool_t)
AC_CHECK_TYPES(enum_t)
AC_CHECK_TYPES(int8_t)
AC_CHECK_TYPES(int16_t)
AC_CHECK_TYPES(int32_t)
AC_CHECK_TYPES(int64_t)
AC_CHECK_TYPES(quad_t)
AC_CHECK_TYPES(uint_t)
AC_CHECK_TYPES(uint8_t)
AC_CHECK_TYPES(uint16_t)
AC_CHECK_TYPES(uint32_t)
AC_CHECK_TYPES(uint64_t)
AC_CHECK_TYPES(u_quad_t)
AC_CHECK_TYPES(netobj)
AC_CHECK_FUNCS(sync)
AC_CONFIG_HEADERS([conf.h])


AC_OUTPUT(config.h \
	  precision.h \
	  XLC.cfg \
	  Makefile \
	  Makefile.rules \
	  Makefile.users \
          tests/Makefile_common \
          hdw_tests/Makefile_common \
          tests/regression.pl \
	  include/input/Makefile\
	  )	  
