dnl--------------------------------------------------------------------
dnl  CVS keywords
dnl
dnl  $Author: chulwoo $
dnl  $Date: 2004-01-14 07:42:59 $
dnl  $Header: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/configure.in,v 1.5 2004-01-14 07:42:59 chulwoo Exp $
dnl  $Id: configure.in,v 1.5 2004-01-14 07:42:59 chulwoo Exp $
dnl  $Name: not supported by cvs2svn $
dnl  $Locker:  $
dnl  $RCSfile: configure.in,v $
dnl  $Revision: 1.5 $
dnl  $Source: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/configure.in,v $
dnl  $State: Exp $
dnl
dnl--------------------------------------------------------------------
AC_INIT(./src/)

dnl Get host and target information:
AC_CANONICAL_SYSTEM

dnl Set correct compiler information
if test "$cross_compiling" = "yes"; then
   AC_CHECK_PROGS(CXX, ${host_alias}-g++)
   AC_CHECK_PROGS(LD, ${host_alias}-ld)
   AC_CHECK_PROGS(AR, ${host_alias}-ar)
   AC_CHECK_PROGS(AS, ${host_alias}-as)
   if test -z "$CXX" || test -z "$LD" || test -z "$AR" || test -z "$AS"; then
     echo "Missing required cross-compilation tools"
     exit 1
   fi
else
dnl check if Intel compiler is available if running on 686
   if test "$host" = "i686-pc-linux-gnu" && \
   test "$build" = "i686-pc-linux-gnu"; then
       AC_CHECK_PROGS(CC, icc, gcc)
       AC_CHECK_PROGS(CXX, icc, g++)
   else
     AC_CHECK_PROGS(CXX, g++)
   fi
   AC_CHECK_PROGS(LD, ld)
   AC_CHECK_PROGS(AR, ar)
   AC_CHECK_PROGS(AS, as)
   if test -z "$CXX" || test -z "$LD" || test -z "$AR" || test -z "$AS"; then
     echo "Missing required compilation tools"
     exit 1
   fi
fi

dnl If using this script, then we are not making the QCDSP version.
NOT_TESTING_QCDSP="yes"
AC_SUBST(NOT_TESTING_QCDSP)

dnl Check for maths library
AC_CHECK_LIB(m, sin, ,echo "CPS needs the math library - bailing out"; exit 1)

dnl Set the relevant include files
topwd_srcdir=`pwd` 
AC_SUBST(topwd_srcdir)
INCLUDE_FLAGS="-I\${BUILDDIR} -I\${SRCDIR}/include"

dnl What target are we compiling for?
AC_ARG_ENABLE(target, 
[  --enable-target   What target are we compiling for? (default=noarch)] ,  , [enable_target="noarch"])
AC_MSG_CHECKING("what target we are compiling for")
AC_MSG_RESULT($enable_target)

CFLAGS=""
CXXFLAGS=""
dnl Can add more cases as we need to, e.g. QCDSP
if test "$enable_target" = "qcdoc"; then
   CC="env GCC_EXEC_PREFIX=\${QOS}/quser/gcc-lib-user/// ${CC}"
   CXX="env GCC_EXEC_PREFIX=\${QOS}/quser/gcc-lib-user/// ${CXX}"
   AS="env GCC_EXEC_PREFIX=\${QOS}/quser/gcc-lib-user/// ${AS}"
   AR="env GCC_EXEC_PREFIX=\${QOS}/quser/gcc-lib-user/// ${AR}"
   LD="env GCC_EXEC_PREFIX=\${QOS}/quser/gcc-lib-user/// ${LD}"
   INCLUDE_FLAGS="-I\${QOS}/quser/include -I\${QOS}/quser_qker/include -I\${QOS}/qhost_qker ${INCLUDE_FLAGS}"
   CFLAGS="-Wa,-m405 -fno-exceptions -fno-hosted"
   CXXFLAGS="-Wa,-m405 -fno-exceptions -fno-hosted"
   ASFLAGS="-m405"
   LDFLAGS="-Wa,\"-init _start\""

   ARCH="QCDOC"
   ARCHDIR="QCDOC_DIR"
   DFLAGS=""
   TESTING_PARALLEL="yes";

elif test "$enable_target" = "mpi"; then
   AC_CHECK_PROGS(CXX, mpic++ mpiCC mpCC, g++)
   if test "$CXX" = "g++"; then
     AC_MSG_WARN([Using g++])
     AC_SEARCH_LIBS(MPI_Init, mpi mpich, ,echo "CPS needs the MPI library for a parallel build - bailing out."; exit 1)
   fi
   DFLAGS=""
   LDFLAGS="-lmpi"
   TESTING_PARALLEL="yes";
   ARCH=MPI
   ARCHDIR="MPI_DIR"

else

   DFLAGS=""
   ARCH=NOARCH
   ARCHDIR="NOARCH_DIR"
   TESTING_PARALLEL="no";
fi


dnl Need to put in machine/compiler specific optimisation flags here
AC_ARG_ENABLE(optimise, 
[  --enable-optimise   Compile with maximum optimisation. (default=yes)] ,  , [enable_optimise="yes"])
AC_MSG_CHECKING("if optimising")
AC_MSG_RESULT($enable_optimise)
if test "$enable_optimise" = "yes"; then
   CFLAGS="${CFLAGS} -O3"
   CXXFLAGS="${CXXFLAGS} -O3"
fi


dnl -O0 flag should overide any previous optimisation declarations
AC_ARG_ENABLE(debug, 
[  --enable-debug   Compile with debug information. (default=no)] ,  , [enable_debug="no"])
AC_MSG_CHECKING("if debugging")
AC_MSG_RESULT($enable_debug)
if test "$enable_debug" = "yes"; then
   CFLAGS="${CFLAGS} -g -O0"
   CXXFLAGS="${CXXFLAGS} -g -O0"
fi

DFLAGS=""
if test "$TESTING_PARALLEL" = "yes"; then
   ENABLE_PARALLEL="define PARALLEL"
else
   ENABLE_PARALLEL="undef PARALLEL"
fi
	

dnl Make visible all variables declared above
AC_SUBST(AR)
AC_SUBST(ARCH)
AC_SUBST(ARCHDIR)
AC_SUBST(AS)
AC_SUBST(ASFLAGS)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(DFLAGS)
AC_SUBST(INCLUDE_FLAGS)
AC_SUBST(LD)
AC_SUBST(LDFLAGS)
AC_SUBST(TESTING_PARALLEL)
AC_SUBST(ENABLE_PARALLEL)
AC_SUBST(QOS)


dnl temporary hack until qos is more mature
if test "$enable_target" = "qcdoc"; then
   CWD="/host/${USER}"
else
   CWD=""
fi
AC_SUBST(CWD)


dnl Basic float/double precision switch:
AC_ARG_ENABLE(double-prec, 
[  --enable-double-prec    Force the code to use double precision throughout (default=yes)] ,  , [enable_double_precision="yes"])
AC_MSG_CHECKING("if double-prec is enabled")
AC_MSG_RESULT($enable_double_precision)
if test "$enable_double_precision" = "yes"; then
  GSUMPRECISION="double"
  LOCALPRECISION="double"
else
  GSUMPRECISION="double"
  LOCALPRECISION="float"
fi
AC_SUBST(GSUMPRECISION)
AC_SUBST(LOCALPRECISION)


AC_PROG_INSTALL

AC_CHECK_PROG(have_doxygen, doxygen, "yes")


AC_OUTPUT(Makefile_cps\
	  config.h \
	  Makefile \
	  Makefile.vars \
	  Makefile.rules \
	  Makefile.compile \
          tests/Makefile_common \
          tests/Makefile_common2 \
          tests/regression.pl )

