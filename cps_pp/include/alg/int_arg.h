/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _INT_ARG_H_RPCGEN
#define _INT_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

class VML;
class IntABArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	IntegratorType type;
	int A_steps;
	int B_steps;
	IntegratorLevel level;
	Float lambda;
};

class VML;
class BilinearDescr {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	Float mass;
	int max_num_iter;
};

class VML;
class ActionBilinearArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	   void resize (  int nmass ) ;
	FclassType fermion;
	struct {
		u_int bilinears_len;
		BilinearDescr *bilinears_val;
	} bilinears;
};

class VML;
class ApproxDescr {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	Float stop_rsd;
};

class VML;
class RationalDescr {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	FieldType field_type;
	Float lambda_low;
	Float lambda_high;
	int power_num;
	int power_den;
	struct {
		u_int md_approx_len;
		ApproxDescr *md_approx_val;
	} md_approx;
	struct {
		u_int mc_approx_len;
		ApproxDescr *mc_approx_val;
	} mc_approx;
};

class VML;
class ActionRationalArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	   void resize (  int nmass ) ;
	   void resize (  int mass ,  int deg_md ,  int deg_mc ) ;
	ActionBilinearArg bi_arg;
	RatApproxType approx_type;
	Float spread;
	long precision;
	int remez_generate;
	char *rat_poles_file;
	struct {
		u_int rationals_len;
		RationalDescr *rationals_val;
	} rationals;
};

class VML;
class SplitRange {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int split_low;
	int split_high;
};

class VML;
class ActionRationalSplitArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	   void resize (  int nmass ) ;
	struct {
		u_int fractionSplit_len;
		SplitRange *fractionSplit_val;
	} fractionSplit;
};

class VML;
class BosonDescr {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	Float stop_rsd_hb;
};

class VML;
class ActionBosonArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	   void resize (  int nmass ) ;
	ActionBilinearArg bi_arg;
	struct {
		u_int bosons_len;
		BosonDescr *bosons_val;
	} bosons;
};

class VML;
class FermionDescr {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int chrono;
	Float stop_rsd_md;
	Float stop_rsd_mc;
};

class VML;
class ActionFermionArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	   void resize (  int nmass ) ;
	ActionBilinearArg bi_arg;
	struct {
		u_int fermions_len;
		FermionDescr *fermions_val;
	} fermions;
};

class VML;
class ActionGaugeArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	GclassType gluon;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_IntABArg (VML *, char *instance, IntABArg*);
extern  bool_t vml_BilinearDescr (VML *, char *instance, BilinearDescr*);
extern  bool_t vml_ActionBilinearArg (VML *, char *instance, ActionBilinearArg*);
extern  bool_t vml_ApproxDescr (VML *, char *instance, ApproxDescr*);
extern  bool_t vml_RationalDescr (VML *, char *instance, RationalDescr*);
extern  bool_t vml_ActionRationalArg (VML *, char *instance, ActionRationalArg*);
extern  bool_t vml_SplitRange (VML *, char *instance, SplitRange*);
extern  bool_t vml_ActionRationalSplitArg (VML *, char *instance, ActionRationalSplitArg*);
extern  bool_t vml_BosonDescr (VML *, char *instance, BosonDescr*);
extern  bool_t vml_ActionBosonArg (VML *, char *instance, ActionBosonArg*);
extern  bool_t vml_FermionDescr (VML *, char *instance, FermionDescr*);
extern  bool_t vml_ActionFermionArg (VML *, char *instance, ActionFermionArg*);
extern  bool_t vml_ActionGaugeArg (VML *, char *instance, ActionGaugeArg*);

#else /* K&R C */
extern  bool_t vml_IntABArg (VML *, char *instance, IntABArg*);
extern  bool_t vml_BilinearDescr (VML *, char *instance, BilinearDescr*);
extern  bool_t vml_ActionBilinearArg (VML *, char *instance, ActionBilinearArg*);
extern  bool_t vml_ApproxDescr (VML *, char *instance, ApproxDescr*);
extern  bool_t vml_RationalDescr (VML *, char *instance, RationalDescr*);
extern  bool_t vml_ActionRationalArg (VML *, char *instance, ActionRationalArg*);
extern  bool_t vml_SplitRange (VML *, char *instance, SplitRange*);
extern  bool_t vml_ActionRationalSplitArg (VML *, char *instance, ActionRationalSplitArg*);
extern  bool_t vml_BosonDescr (VML *, char *instance, BosonDescr*);
extern  bool_t vml_ActionBosonArg (VML *, char *instance, ActionBosonArg*);
extern  bool_t vml_FermionDescr (VML *, char *instance, FermionDescr*);
extern  bool_t vml_ActionFermionArg (VML *, char *instance, ActionFermionArg*);
extern  bool_t vml_ActionGaugeArg (VML *, char *instance, ActionGaugeArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_INT_ARG_H_RPCGEN */
