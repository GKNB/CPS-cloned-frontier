/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _HMD_ARG_H_RPCGEN
#define _HMD_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

enum ReunitarizeType {
	REUNITARIZE_NO = 0,
	REUNITARIZE_YES = 1,
};
typedef enum ReunitarizeType ReunitarizeType;
extern struct vml_enum_map ReunitarizeType_map[];

enum MetropolisType {
	METROPOLIS_NO = 0,
	METROPOLIS_YES = 1,
};
typedef enum MetropolisType MetropolisType;
extern struct vml_enum_map MetropolisType_map[];

enum RhmcPolesAction {
	RHMC_POLES_CALC = 0,
	RHMC_POLES_READ = 1,
	RHMC_POLES_CALC_WRITE = 2,
};
typedef enum RhmcPolesAction RhmcPolesAction;
extern struct vml_enum_map RhmcPolesAction_map[];

enum HmdLimits {
	MAX_HMD_MASSES = 8,
	MAX_RAT_DEGREE = 20,
};
typedef enum HmdLimits HmdLimits;
extern struct vml_enum_map HmdLimits_map[];

typedef Float FRatVec[MAX_RAT_DEGREE];

typedef int IMassVec[MAX_HMD_MASSES];

typedef Float FMassVec[MAX_HMD_MASSES];

typedef FRatVec FRatMassVec[MAX_HMD_MASSES];

class VML;
class HmdArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int n_frm_masses;
	int n_bsn_masses;
	int steps_per_traj;
	Float step_size;
	MetropolisType metropolis;
	ReunitarizeType reunitarize;
	RatApproxType approx_type;
	Float spread;
	long precision;
	int isz;
	int sw;
	int chrono;
	int reproduce;
	int reproduce_attempt_limit;
	FMassVec frm_mass;
	IMassVec frm_flavors;
	FMassVec bsn_mass;
	IMassVec max_num_iter;
	FMassVec stop_rsd;
	FMassVec stop_rsd_md;
	FMassVec stop_rsd_mc;
	FieldType field_type[MAX_HMD_MASSES];
	IMassVec valid_approx;
	FMassVec lambda_low;
	FMassVec lambda_high;
	FMassVec lambda_min;
	FMassVec lambda_max;
	RhmcPolesAction rhmc_poles_action;
	char *rhmc_poles_file;
	IMassVec frm_power_num;
	IMassVec frm_power_den;
	IMassVec FRatDeg;
	IMassVec FRatDegNew;
	IMassVec SRatDegNew;
	FMassVec FRatError;
	FMassVec FRatNorm;
	FRatMassVec FRatRes;
	FRatMassVec FRatPole;
	IMassVec SRatDeg;
	FMassVec SRatError;
	FMassVec SRatNorm;
	FRatMassVec SRatRes;
	FRatMassVec SRatPole;
	FMassVec SIRatNorm;
	FRatMassVec SIRatRes;
	FRatMassVec SIRatPole;
};

class VML;
class EvoArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	FclassType Fermion;
	GclassType Gluon;
	int traj_start;
	int gauge_unload_period;
	int gauge_configurations;
	int io_concurrency;
	int hdw_xcsum;
	int hdw_rcsum;
	int reproduce_percent;
	char *ensemble_id;
	char *ensemble_label;
	char *creator;
	char *gauge_file_stem;
	char *rng_file_stem;
	char *plaquette_stem;
	char *pbp_stem;
	char *evo_stem;
	char *work_directory;
	int CalcEig;
	char *eig_lo_stem;
	char *eig_hi_stem;
};

class VML;
class RhmcPolesState {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	IMassVec frm_power_num;
	IMassVec frm_power_den;
	IMassVec FRatDeg;
	IMassVec FRatDegNew;
	IMassVec SRatDegNew;
	FMassVec FRatError;
	FMassVec FRatNorm;
	FRatMassVec FRatRes;
	FRatMassVec FRatPole;
	IMassVec SRatDeg;
	FMassVec SRatError;
	FMassVec SRatNorm;
	FRatMassVec SRatRes;
	FRatMassVec SRatPole;
	FMassVec SIRatNorm;
	FRatMassVec SIRatRes;
	FRatMassVec SIRatPole;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_ReunitarizeType (VML *, char *instance, ReunitarizeType*);
extern  bool_t vml_MetropolisType (VML *, char *instance, MetropolisType*);
extern  bool_t vml_RhmcPolesAction (VML *, char *instance, RhmcPolesAction*);
extern  bool_t vml_HmdLimits (VML *, char *instance, HmdLimits*);
extern  bool_t vml_FRatVec (VML *, char *instance, FRatVec);
extern  bool_t vml_IMassVec (VML *, char *instance, IMassVec);
extern  bool_t vml_FMassVec (VML *, char *instance, FMassVec);
extern  bool_t vml_FRatMassVec (VML *, char *instance, FRatMassVec);
extern  bool_t vml_HmdArg (VML *, char *instance, HmdArg*);
extern  bool_t vml_EvoArg (VML *, char *instance, EvoArg*);
extern  bool_t vml_RhmcPolesState (VML *, char *instance, RhmcPolesState*);

#else /* K&R C */
extern  bool_t vml_ReunitarizeType (VML *, char *instance, ReunitarizeType*);
extern  bool_t vml_MetropolisType (VML *, char *instance, MetropolisType*);
extern  bool_t vml_RhmcPolesAction (VML *, char *instance, RhmcPolesAction*);
extern  bool_t vml_HmdLimits (VML *, char *instance, HmdLimits*);
extern  bool_t vml_FRatVec (VML *, char *instance, FRatVec);
extern  bool_t vml_IMassVec (VML *, char *instance, IMassVec);
extern  bool_t vml_FMassVec (VML *, char *instance, FMassVec);
extern  bool_t vml_FRatMassVec (VML *, char *instance, FRatMassVec);
extern  bool_t vml_HmdArg (VML *, char *instance, HmdArg*);
extern  bool_t vml_EvoArg (VML *, char *instance, EvoArg*);
extern  bool_t vml_RhmcPolesState (VML *, char *instance, RhmcPolesState*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_HMD_ARG_H_RPCGEN */
