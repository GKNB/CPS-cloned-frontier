/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _GPARITY_CONTRACT_ARG_H_RPCGEN
#define _GPARITY_CONTRACT_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

struct GparityMeasurement {
	char *prop_1;
	char *prop_2;
	char *label_stub;
	char *file_stub;
};
typedef struct GparityMeasurement GparityMeasurement;

class VML;
class GparityContractArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	struct {
		u_int meas_len;
		GparityMeasurement *meas_val;
	} meas;
	char *config_fmt;
	int conf_start;
	int conf_incr;
	int conf_lessthan;
	FixGaugeArg fix_gauge;
	   GparityContractArg (  ) ;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_GparityMeasurement (VML *, char *instance, GparityMeasurement*);
extern  bool_t vml_GparityContractArg (VML *, char *instance, GparityContractArg*);

#else /* K&R C */
extern  bool_t vml_GparityMeasurement (VML *, char *instance, GparityMeasurement*);
extern  bool_t vml_GparityContractArg (VML *, char *instance, GparityContractArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_GPARITY_CONTRACT_ARG_H_RPCGEN */
